// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/user"
	"github.com/kofalt/example-ent-crdb/ent/userpromocode"
)

// UserPromoCode is the model entity for the UserPromoCode schema.
type UserPromoCode struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// UsageCount holds the value of the "usage_count" field.
	UsageCount int `json:"usage_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserPromoCodeQuery when eager-loading is set.
	Edges UserPromoCodeEdges `json:"edges"`
}

// UserPromoCodeEdges holds the relations/edges for other nodes in the graph.
type UserPromoCodeEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPromoCodeEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPromoCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userpromocode.FieldUsageCount:
			values[i] = new(sql.NullInt64)
		case userpromocode.FieldCity, userpromocode.FieldCode:
			values[i] = new(sql.NullString)
		case userpromocode.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case userpromocode.FieldID, userpromocode.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserPromoCode", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPromoCode fields.
func (upc *UserPromoCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userpromocode.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				upc.ID = *value
			}
		case userpromocode.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				upc.City = value.String
			}
		case userpromocode.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				upc.UserID = *value
			}
		case userpromocode.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				upc.Code = value.String
			}
		case userpromocode.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				upc.Timestamp = value.Time
			}
		case userpromocode.FieldUsageCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_count", values[i])
			} else if value.Valid {
				upc.UsageCount = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserPromoCode entity.
func (upc *UserPromoCode) QueryUser() *UserQuery {
	return NewUserPromoCodeClient(upc.config).QueryUser(upc)
}

// Update returns a builder for updating this UserPromoCode.
// Note that you need to call UserPromoCode.Unwrap() before calling this method if this UserPromoCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (upc *UserPromoCode) Update() *UserPromoCodeUpdateOne {
	return NewUserPromoCodeClient(upc.config).UpdateOne(upc)
}

// Unwrap unwraps the UserPromoCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (upc *UserPromoCode) Unwrap() *UserPromoCode {
	_tx, ok := upc.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserPromoCode is not a transactional entity")
	}
	upc.config.driver = _tx.drv
	return upc
}

// String implements the fmt.Stringer.
func (upc *UserPromoCode) String() string {
	var builder strings.Builder
	builder.WriteString("UserPromoCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", upc.ID))
	builder.WriteString("city=")
	builder.WriteString(upc.City)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", upc.UserID))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(upc.Code)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(upc.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("usage_count=")
	builder.WriteString(fmt.Sprintf("%v", upc.UsageCount))
	builder.WriteByte(')')
	return builder.String()
}

// UserPromoCodes is a parsable slice of UserPromoCode.
type UserPromoCodes []*UserPromoCode

func (upc UserPromoCodes) config(cfg config) {
	for _i := range upc {
		upc[_i].config = cfg
	}
}
