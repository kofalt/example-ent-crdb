// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kofalt/example-ent-crdb/ent/predicate"
	"github.com/kofalt/example-ent-crdb/ent/vehiclelocationhistory"
)

// VehicleLocationHistoryDelete is the builder for deleting a VehicleLocationHistory entity.
type VehicleLocationHistoryDelete struct {
	config
	hooks    []Hook
	mutation *VehicleLocationHistoryMutation
}

// Where appends a list predicates to the VehicleLocationHistoryDelete builder.
func (vlhd *VehicleLocationHistoryDelete) Where(ps ...predicate.VehicleLocationHistory) *VehicleLocationHistoryDelete {
	vlhd.mutation.Where(ps...)
	return vlhd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vlhd *VehicleLocationHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, VehicleLocationHistoryMutation](ctx, vlhd.sqlExec, vlhd.mutation, vlhd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vlhd *VehicleLocationHistoryDelete) ExecX(ctx context.Context) int {
	n, err := vlhd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vlhd *VehicleLocationHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: vehiclelocationhistory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vehiclelocationhistory.FieldID,
			},
		},
	}
	if ps := vlhd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vlhd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vlhd.mutation.done = true
	return affected, err
}

// VehicleLocationHistoryDeleteOne is the builder for deleting a single VehicleLocationHistory entity.
type VehicleLocationHistoryDeleteOne struct {
	vlhd *VehicleLocationHistoryDelete
}

// Where appends a list predicates to the VehicleLocationHistoryDelete builder.
func (vlhdo *VehicleLocationHistoryDeleteOne) Where(ps ...predicate.VehicleLocationHistory) *VehicleLocationHistoryDeleteOne {
	vlhdo.vlhd.mutation.Where(ps...)
	return vlhdo
}

// Exec executes the deletion query.
func (vlhdo *VehicleLocationHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := vlhdo.vlhd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{vehiclelocationhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vlhdo *VehicleLocationHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := vlhdo.Exec(ctx); err != nil {
		panic(err)
	}
}
