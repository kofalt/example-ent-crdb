// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/predicate"
	"github.com/kofalt/example-ent-crdb/ent/user"
	"github.com/kofalt/example-ent-crdb/ent/userpromocode"
)

// UserPromoCodeUpdate is the builder for updating UserPromoCode entities.
type UserPromoCodeUpdate struct {
	config
	hooks    []Hook
	mutation *UserPromoCodeMutation
}

// Where appends a list predicates to the UserPromoCodeUpdate builder.
func (upcu *UserPromoCodeUpdate) Where(ps ...predicate.UserPromoCode) *UserPromoCodeUpdate {
	upcu.mutation.Where(ps...)
	return upcu
}

// SetCity sets the "city" field.
func (upcu *UserPromoCodeUpdate) SetCity(s string) *UserPromoCodeUpdate {
	upcu.mutation.SetCity(s)
	return upcu
}

// SetUserID sets the "user_id" field.
func (upcu *UserPromoCodeUpdate) SetUserID(u uuid.UUID) *UserPromoCodeUpdate {
	upcu.mutation.SetUserID(u)
	return upcu
}

// SetCode sets the "code" field.
func (upcu *UserPromoCodeUpdate) SetCode(s string) *UserPromoCodeUpdate {
	upcu.mutation.SetCode(s)
	return upcu
}

// SetTimestamp sets the "timestamp" field.
func (upcu *UserPromoCodeUpdate) SetTimestamp(t time.Time) *UserPromoCodeUpdate {
	upcu.mutation.SetTimestamp(t)
	return upcu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (upcu *UserPromoCodeUpdate) SetNillableTimestamp(t *time.Time) *UserPromoCodeUpdate {
	if t != nil {
		upcu.SetTimestamp(*t)
	}
	return upcu
}

// ClearTimestamp clears the value of the "timestamp" field.
func (upcu *UserPromoCodeUpdate) ClearTimestamp() *UserPromoCodeUpdate {
	upcu.mutation.ClearTimestamp()
	return upcu
}

// SetUsageCount sets the "usage_count" field.
func (upcu *UserPromoCodeUpdate) SetUsageCount(i int) *UserPromoCodeUpdate {
	upcu.mutation.ResetUsageCount()
	upcu.mutation.SetUsageCount(i)
	return upcu
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (upcu *UserPromoCodeUpdate) SetNillableUsageCount(i *int) *UserPromoCodeUpdate {
	if i != nil {
		upcu.SetUsageCount(*i)
	}
	return upcu
}

// AddUsageCount adds i to the "usage_count" field.
func (upcu *UserPromoCodeUpdate) AddUsageCount(i int) *UserPromoCodeUpdate {
	upcu.mutation.AddUsageCount(i)
	return upcu
}

// ClearUsageCount clears the value of the "usage_count" field.
func (upcu *UserPromoCodeUpdate) ClearUsageCount() *UserPromoCodeUpdate {
	upcu.mutation.ClearUsageCount()
	return upcu
}

// SetUser sets the "user" edge to the User entity.
func (upcu *UserPromoCodeUpdate) SetUser(u *User) *UserPromoCodeUpdate {
	return upcu.SetUserID(u.ID)
}

// Mutation returns the UserPromoCodeMutation object of the builder.
func (upcu *UserPromoCodeUpdate) Mutation() *UserPromoCodeMutation {
	return upcu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upcu *UserPromoCodeUpdate) ClearUser() *UserPromoCodeUpdate {
	upcu.mutation.ClearUser()
	return upcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upcu *UserPromoCodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserPromoCodeMutation](ctx, upcu.sqlSave, upcu.mutation, upcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upcu *UserPromoCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := upcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upcu *UserPromoCodeUpdate) Exec(ctx context.Context) error {
	_, err := upcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcu *UserPromoCodeUpdate) ExecX(ctx context.Context) {
	if err := upcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upcu *UserPromoCodeUpdate) check() error {
	if _, ok := upcu.mutation.UserID(); upcu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserPromoCode.user"`)
	}
	return nil
}

func (upcu *UserPromoCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := upcu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpromocode.Table,
			Columns: userpromocode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userpromocode.FieldID,
			},
		},
	}
	if ps := upcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upcu.mutation.City(); ok {
		_spec.SetField(userpromocode.FieldCity, field.TypeString, value)
	}
	if value, ok := upcu.mutation.Code(); ok {
		_spec.SetField(userpromocode.FieldCode, field.TypeString, value)
	}
	if value, ok := upcu.mutation.Timestamp(); ok {
		_spec.SetField(userpromocode.FieldTimestamp, field.TypeTime, value)
	}
	if upcu.mutation.TimestampCleared() {
		_spec.ClearField(userpromocode.FieldTimestamp, field.TypeTime)
	}
	if value, ok := upcu.mutation.UsageCount(); ok {
		_spec.SetField(userpromocode.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := upcu.mutation.AddedUsageCount(); ok {
		_spec.AddField(userpromocode.FieldUsageCount, field.TypeInt, value)
	}
	if upcu.mutation.UsageCountCleared() {
		_spec.ClearField(userpromocode.FieldUsageCount, field.TypeInt)
	}
	if upcu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpromocode.UserTable,
			Columns: []string{userpromocode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upcu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpromocode.UserTable,
			Columns: []string{userpromocode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpromocode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upcu.mutation.done = true
	return n, nil
}

// UserPromoCodeUpdateOne is the builder for updating a single UserPromoCode entity.
type UserPromoCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPromoCodeMutation
}

// SetCity sets the "city" field.
func (upcuo *UserPromoCodeUpdateOne) SetCity(s string) *UserPromoCodeUpdateOne {
	upcuo.mutation.SetCity(s)
	return upcuo
}

// SetUserID sets the "user_id" field.
func (upcuo *UserPromoCodeUpdateOne) SetUserID(u uuid.UUID) *UserPromoCodeUpdateOne {
	upcuo.mutation.SetUserID(u)
	return upcuo
}

// SetCode sets the "code" field.
func (upcuo *UserPromoCodeUpdateOne) SetCode(s string) *UserPromoCodeUpdateOne {
	upcuo.mutation.SetCode(s)
	return upcuo
}

// SetTimestamp sets the "timestamp" field.
func (upcuo *UserPromoCodeUpdateOne) SetTimestamp(t time.Time) *UserPromoCodeUpdateOne {
	upcuo.mutation.SetTimestamp(t)
	return upcuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (upcuo *UserPromoCodeUpdateOne) SetNillableTimestamp(t *time.Time) *UserPromoCodeUpdateOne {
	if t != nil {
		upcuo.SetTimestamp(*t)
	}
	return upcuo
}

// ClearTimestamp clears the value of the "timestamp" field.
func (upcuo *UserPromoCodeUpdateOne) ClearTimestamp() *UserPromoCodeUpdateOne {
	upcuo.mutation.ClearTimestamp()
	return upcuo
}

// SetUsageCount sets the "usage_count" field.
func (upcuo *UserPromoCodeUpdateOne) SetUsageCount(i int) *UserPromoCodeUpdateOne {
	upcuo.mutation.ResetUsageCount()
	upcuo.mutation.SetUsageCount(i)
	return upcuo
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (upcuo *UserPromoCodeUpdateOne) SetNillableUsageCount(i *int) *UserPromoCodeUpdateOne {
	if i != nil {
		upcuo.SetUsageCount(*i)
	}
	return upcuo
}

// AddUsageCount adds i to the "usage_count" field.
func (upcuo *UserPromoCodeUpdateOne) AddUsageCount(i int) *UserPromoCodeUpdateOne {
	upcuo.mutation.AddUsageCount(i)
	return upcuo
}

// ClearUsageCount clears the value of the "usage_count" field.
func (upcuo *UserPromoCodeUpdateOne) ClearUsageCount() *UserPromoCodeUpdateOne {
	upcuo.mutation.ClearUsageCount()
	return upcuo
}

// SetUser sets the "user" edge to the User entity.
func (upcuo *UserPromoCodeUpdateOne) SetUser(u *User) *UserPromoCodeUpdateOne {
	return upcuo.SetUserID(u.ID)
}

// Mutation returns the UserPromoCodeMutation object of the builder.
func (upcuo *UserPromoCodeUpdateOne) Mutation() *UserPromoCodeMutation {
	return upcuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upcuo *UserPromoCodeUpdateOne) ClearUser() *UserPromoCodeUpdateOne {
	upcuo.mutation.ClearUser()
	return upcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upcuo *UserPromoCodeUpdateOne) Select(field string, fields ...string) *UserPromoCodeUpdateOne {
	upcuo.fields = append([]string{field}, fields...)
	return upcuo
}

// Save executes the query and returns the updated UserPromoCode entity.
func (upcuo *UserPromoCodeUpdateOne) Save(ctx context.Context) (*UserPromoCode, error) {
	return withHooks[*UserPromoCode, UserPromoCodeMutation](ctx, upcuo.sqlSave, upcuo.mutation, upcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upcuo *UserPromoCodeUpdateOne) SaveX(ctx context.Context) *UserPromoCode {
	node, err := upcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upcuo *UserPromoCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := upcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcuo *UserPromoCodeUpdateOne) ExecX(ctx context.Context) {
	if err := upcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upcuo *UserPromoCodeUpdateOne) check() error {
	if _, ok := upcuo.mutation.UserID(); upcuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserPromoCode.user"`)
	}
	return nil
}

func (upcuo *UserPromoCodeUpdateOne) sqlSave(ctx context.Context) (_node *UserPromoCode, err error) {
	if err := upcuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpromocode.Table,
			Columns: userpromocode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userpromocode.FieldID,
			},
		},
	}
	id, ok := upcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserPromoCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpromocode.FieldID)
		for _, f := range fields {
			if !userpromocode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userpromocode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upcuo.mutation.City(); ok {
		_spec.SetField(userpromocode.FieldCity, field.TypeString, value)
	}
	if value, ok := upcuo.mutation.Code(); ok {
		_spec.SetField(userpromocode.FieldCode, field.TypeString, value)
	}
	if value, ok := upcuo.mutation.Timestamp(); ok {
		_spec.SetField(userpromocode.FieldTimestamp, field.TypeTime, value)
	}
	if upcuo.mutation.TimestampCleared() {
		_spec.ClearField(userpromocode.FieldTimestamp, field.TypeTime)
	}
	if value, ok := upcuo.mutation.UsageCount(); ok {
		_spec.SetField(userpromocode.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := upcuo.mutation.AddedUsageCount(); ok {
		_spec.AddField(userpromocode.FieldUsageCount, field.TypeInt, value)
	}
	if upcuo.mutation.UsageCountCleared() {
		_spec.ClearField(userpromocode.FieldUsageCount, field.TypeInt)
	}
	if upcuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpromocode.UserTable,
			Columns: []string{userpromocode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upcuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpromocode.UserTable,
			Columns: []string{userpromocode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPromoCode{config: upcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpromocode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upcuo.mutation.done = true
	return _node, nil
}
