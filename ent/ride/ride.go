// Code generated by ent, DO NOT EDIT.

package ride

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the ride type in the database.
	Label = "ride"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldVehicleCity holds the string denoting the vehicle_city field in the database.
	FieldVehicleCity = "vehicle_city"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldVehicleID holds the string denoting the vehicle_id field in the database.
	FieldVehicleID = "vehicle_id"
	// FieldStartAddress holds the string denoting the start_address field in the database.
	FieldStartAddress = "start_address"
	// FieldEndAddress holds the string denoting the end_address field in the database.
	FieldEndAddress = "end_address"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldRevenue holds the string denoting the revenue field in the database.
	FieldRevenue = "revenue"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeVehicle holds the string denoting the vehicle edge name in mutations.
	EdgeVehicle = "vehicle"
	// EdgeVehicleLocationHistories holds the string denoting the vehicle_location_histories edge name in mutations.
	EdgeVehicleLocationHistories = "vehicle_location_histories"
	// Table holds the table name of the ride in the database.
	Table = "rides"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "rides"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "rider_id"
	// VehicleTable is the table that holds the vehicle relation/edge.
	VehicleTable = "rides"
	// VehicleInverseTable is the table name for the Vehicle entity.
	// It exists in this package in order to avoid circular dependency with the "vehicle" package.
	VehicleInverseTable = "vehicles"
	// VehicleColumn is the table column denoting the vehicle relation/edge.
	VehicleColumn = "vehicle_id"
	// VehicleLocationHistoriesTable is the table that holds the vehicle_location_histories relation/edge.
	VehicleLocationHistoriesTable = "vehicle_location_histories"
	// VehicleLocationHistoriesInverseTable is the table name for the VehicleLocationHistory entity.
	// It exists in this package in order to avoid circular dependency with the "vehiclelocationhistory" package.
	VehicleLocationHistoriesInverseTable = "vehicle_location_histories"
	// VehicleLocationHistoriesColumn is the table column denoting the vehicle_location_histories relation/edge.
	VehicleLocationHistoriesColumn = "ride_id"
)

// Columns holds all SQL columns for ride fields.
var Columns = []string{
	FieldID,
	FieldCity,
	FieldVehicleCity,
	FieldRiderID,
	FieldVehicleID,
	FieldStartAddress,
	FieldEndAddress,
	FieldStartTime,
	FieldEndTime,
	FieldRevenue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
