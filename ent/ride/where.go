// Code generated by ent, DO NOT EDIT.

package ride

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldLTE(FieldID, id))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldCity, v))
}

// VehicleCity applies equality check predicate on the "vehicle_city" field. It's identical to VehicleCityEQ.
func VehicleCity(v string) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldVehicleCity, v))
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldRiderID, v))
}

// VehicleID applies equality check predicate on the "vehicle_id" field. It's identical to VehicleIDEQ.
func VehicleID(v uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldVehicleID, v))
}

// StartAddress applies equality check predicate on the "start_address" field. It's identical to StartAddressEQ.
func StartAddress(v string) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldStartAddress, v))
}

// EndAddress applies equality check predicate on the "end_address" field. It's identical to EndAddressEQ.
func EndAddress(v string) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldEndAddress, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldEndTime, v))
}

// Revenue applies equality check predicate on the "revenue" field. It's identical to RevenueEQ.
func Revenue(v float64) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldRevenue, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Ride {
	return predicate.Ride(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Ride {
	return predicate.Ride(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Ride {
	return predicate.Ride(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Ride {
	return predicate.Ride(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Ride {
	return predicate.Ride(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Ride {
	return predicate.Ride(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Ride {
	return predicate.Ride(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Ride {
	return predicate.Ride(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Ride {
	return predicate.Ride(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Ride {
	return predicate.Ride(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Ride {
	return predicate.Ride(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Ride {
	return predicate.Ride(sql.FieldContainsFold(FieldCity, v))
}

// VehicleCityEQ applies the EQ predicate on the "vehicle_city" field.
func VehicleCityEQ(v string) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldVehicleCity, v))
}

// VehicleCityNEQ applies the NEQ predicate on the "vehicle_city" field.
func VehicleCityNEQ(v string) predicate.Ride {
	return predicate.Ride(sql.FieldNEQ(FieldVehicleCity, v))
}

// VehicleCityIn applies the In predicate on the "vehicle_city" field.
func VehicleCityIn(vs ...string) predicate.Ride {
	return predicate.Ride(sql.FieldIn(FieldVehicleCity, vs...))
}

// VehicleCityNotIn applies the NotIn predicate on the "vehicle_city" field.
func VehicleCityNotIn(vs ...string) predicate.Ride {
	return predicate.Ride(sql.FieldNotIn(FieldVehicleCity, vs...))
}

// VehicleCityGT applies the GT predicate on the "vehicle_city" field.
func VehicleCityGT(v string) predicate.Ride {
	return predicate.Ride(sql.FieldGT(FieldVehicleCity, v))
}

// VehicleCityGTE applies the GTE predicate on the "vehicle_city" field.
func VehicleCityGTE(v string) predicate.Ride {
	return predicate.Ride(sql.FieldGTE(FieldVehicleCity, v))
}

// VehicleCityLT applies the LT predicate on the "vehicle_city" field.
func VehicleCityLT(v string) predicate.Ride {
	return predicate.Ride(sql.FieldLT(FieldVehicleCity, v))
}

// VehicleCityLTE applies the LTE predicate on the "vehicle_city" field.
func VehicleCityLTE(v string) predicate.Ride {
	return predicate.Ride(sql.FieldLTE(FieldVehicleCity, v))
}

// VehicleCityContains applies the Contains predicate on the "vehicle_city" field.
func VehicleCityContains(v string) predicate.Ride {
	return predicate.Ride(sql.FieldContains(FieldVehicleCity, v))
}

// VehicleCityHasPrefix applies the HasPrefix predicate on the "vehicle_city" field.
func VehicleCityHasPrefix(v string) predicate.Ride {
	return predicate.Ride(sql.FieldHasPrefix(FieldVehicleCity, v))
}

// VehicleCityHasSuffix applies the HasSuffix predicate on the "vehicle_city" field.
func VehicleCityHasSuffix(v string) predicate.Ride {
	return predicate.Ride(sql.FieldHasSuffix(FieldVehicleCity, v))
}

// VehicleCityIsNil applies the IsNil predicate on the "vehicle_city" field.
func VehicleCityIsNil() predicate.Ride {
	return predicate.Ride(sql.FieldIsNull(FieldVehicleCity))
}

// VehicleCityNotNil applies the NotNil predicate on the "vehicle_city" field.
func VehicleCityNotNil() predicate.Ride {
	return predicate.Ride(sql.FieldNotNull(FieldVehicleCity))
}

// VehicleCityEqualFold applies the EqualFold predicate on the "vehicle_city" field.
func VehicleCityEqualFold(v string) predicate.Ride {
	return predicate.Ride(sql.FieldEqualFold(FieldVehicleCity, v))
}

// VehicleCityContainsFold applies the ContainsFold predicate on the "vehicle_city" field.
func VehicleCityContainsFold(v string) predicate.Ride {
	return predicate.Ride(sql.FieldContainsFold(FieldVehicleCity, v))
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldRiderID, v))
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldNEQ(FieldRiderID, v))
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldIn(FieldRiderID, vs...))
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldNotIn(FieldRiderID, vs...))
}

// RiderIDIsNil applies the IsNil predicate on the "rider_id" field.
func RiderIDIsNil() predicate.Ride {
	return predicate.Ride(sql.FieldIsNull(FieldRiderID))
}

// RiderIDNotNil applies the NotNil predicate on the "rider_id" field.
func RiderIDNotNil() predicate.Ride {
	return predicate.Ride(sql.FieldNotNull(FieldRiderID))
}

// VehicleIDEQ applies the EQ predicate on the "vehicle_id" field.
func VehicleIDEQ(v uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldVehicleID, v))
}

// VehicleIDNEQ applies the NEQ predicate on the "vehicle_id" field.
func VehicleIDNEQ(v uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldNEQ(FieldVehicleID, v))
}

// VehicleIDIn applies the In predicate on the "vehicle_id" field.
func VehicleIDIn(vs ...uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldIn(FieldVehicleID, vs...))
}

// VehicleIDNotIn applies the NotIn predicate on the "vehicle_id" field.
func VehicleIDNotIn(vs ...uuid.UUID) predicate.Ride {
	return predicate.Ride(sql.FieldNotIn(FieldVehicleID, vs...))
}

// VehicleIDIsNil applies the IsNil predicate on the "vehicle_id" field.
func VehicleIDIsNil() predicate.Ride {
	return predicate.Ride(sql.FieldIsNull(FieldVehicleID))
}

// VehicleIDNotNil applies the NotNil predicate on the "vehicle_id" field.
func VehicleIDNotNil() predicate.Ride {
	return predicate.Ride(sql.FieldNotNull(FieldVehicleID))
}

// StartAddressEQ applies the EQ predicate on the "start_address" field.
func StartAddressEQ(v string) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldStartAddress, v))
}

// StartAddressNEQ applies the NEQ predicate on the "start_address" field.
func StartAddressNEQ(v string) predicate.Ride {
	return predicate.Ride(sql.FieldNEQ(FieldStartAddress, v))
}

// StartAddressIn applies the In predicate on the "start_address" field.
func StartAddressIn(vs ...string) predicate.Ride {
	return predicate.Ride(sql.FieldIn(FieldStartAddress, vs...))
}

// StartAddressNotIn applies the NotIn predicate on the "start_address" field.
func StartAddressNotIn(vs ...string) predicate.Ride {
	return predicate.Ride(sql.FieldNotIn(FieldStartAddress, vs...))
}

// StartAddressGT applies the GT predicate on the "start_address" field.
func StartAddressGT(v string) predicate.Ride {
	return predicate.Ride(sql.FieldGT(FieldStartAddress, v))
}

// StartAddressGTE applies the GTE predicate on the "start_address" field.
func StartAddressGTE(v string) predicate.Ride {
	return predicate.Ride(sql.FieldGTE(FieldStartAddress, v))
}

// StartAddressLT applies the LT predicate on the "start_address" field.
func StartAddressLT(v string) predicate.Ride {
	return predicate.Ride(sql.FieldLT(FieldStartAddress, v))
}

// StartAddressLTE applies the LTE predicate on the "start_address" field.
func StartAddressLTE(v string) predicate.Ride {
	return predicate.Ride(sql.FieldLTE(FieldStartAddress, v))
}

// StartAddressContains applies the Contains predicate on the "start_address" field.
func StartAddressContains(v string) predicate.Ride {
	return predicate.Ride(sql.FieldContains(FieldStartAddress, v))
}

// StartAddressHasPrefix applies the HasPrefix predicate on the "start_address" field.
func StartAddressHasPrefix(v string) predicate.Ride {
	return predicate.Ride(sql.FieldHasPrefix(FieldStartAddress, v))
}

// StartAddressHasSuffix applies the HasSuffix predicate on the "start_address" field.
func StartAddressHasSuffix(v string) predicate.Ride {
	return predicate.Ride(sql.FieldHasSuffix(FieldStartAddress, v))
}

// StartAddressIsNil applies the IsNil predicate on the "start_address" field.
func StartAddressIsNil() predicate.Ride {
	return predicate.Ride(sql.FieldIsNull(FieldStartAddress))
}

// StartAddressNotNil applies the NotNil predicate on the "start_address" field.
func StartAddressNotNil() predicate.Ride {
	return predicate.Ride(sql.FieldNotNull(FieldStartAddress))
}

// StartAddressEqualFold applies the EqualFold predicate on the "start_address" field.
func StartAddressEqualFold(v string) predicate.Ride {
	return predicate.Ride(sql.FieldEqualFold(FieldStartAddress, v))
}

// StartAddressContainsFold applies the ContainsFold predicate on the "start_address" field.
func StartAddressContainsFold(v string) predicate.Ride {
	return predicate.Ride(sql.FieldContainsFold(FieldStartAddress, v))
}

// EndAddressEQ applies the EQ predicate on the "end_address" field.
func EndAddressEQ(v string) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldEndAddress, v))
}

// EndAddressNEQ applies the NEQ predicate on the "end_address" field.
func EndAddressNEQ(v string) predicate.Ride {
	return predicate.Ride(sql.FieldNEQ(FieldEndAddress, v))
}

// EndAddressIn applies the In predicate on the "end_address" field.
func EndAddressIn(vs ...string) predicate.Ride {
	return predicate.Ride(sql.FieldIn(FieldEndAddress, vs...))
}

// EndAddressNotIn applies the NotIn predicate on the "end_address" field.
func EndAddressNotIn(vs ...string) predicate.Ride {
	return predicate.Ride(sql.FieldNotIn(FieldEndAddress, vs...))
}

// EndAddressGT applies the GT predicate on the "end_address" field.
func EndAddressGT(v string) predicate.Ride {
	return predicate.Ride(sql.FieldGT(FieldEndAddress, v))
}

// EndAddressGTE applies the GTE predicate on the "end_address" field.
func EndAddressGTE(v string) predicate.Ride {
	return predicate.Ride(sql.FieldGTE(FieldEndAddress, v))
}

// EndAddressLT applies the LT predicate on the "end_address" field.
func EndAddressLT(v string) predicate.Ride {
	return predicate.Ride(sql.FieldLT(FieldEndAddress, v))
}

// EndAddressLTE applies the LTE predicate on the "end_address" field.
func EndAddressLTE(v string) predicate.Ride {
	return predicate.Ride(sql.FieldLTE(FieldEndAddress, v))
}

// EndAddressContains applies the Contains predicate on the "end_address" field.
func EndAddressContains(v string) predicate.Ride {
	return predicate.Ride(sql.FieldContains(FieldEndAddress, v))
}

// EndAddressHasPrefix applies the HasPrefix predicate on the "end_address" field.
func EndAddressHasPrefix(v string) predicate.Ride {
	return predicate.Ride(sql.FieldHasPrefix(FieldEndAddress, v))
}

// EndAddressHasSuffix applies the HasSuffix predicate on the "end_address" field.
func EndAddressHasSuffix(v string) predicate.Ride {
	return predicate.Ride(sql.FieldHasSuffix(FieldEndAddress, v))
}

// EndAddressIsNil applies the IsNil predicate on the "end_address" field.
func EndAddressIsNil() predicate.Ride {
	return predicate.Ride(sql.FieldIsNull(FieldEndAddress))
}

// EndAddressNotNil applies the NotNil predicate on the "end_address" field.
func EndAddressNotNil() predicate.Ride {
	return predicate.Ride(sql.FieldNotNull(FieldEndAddress))
}

// EndAddressEqualFold applies the EqualFold predicate on the "end_address" field.
func EndAddressEqualFold(v string) predicate.Ride {
	return predicate.Ride(sql.FieldEqualFold(FieldEndAddress, v))
}

// EndAddressContainsFold applies the ContainsFold predicate on the "end_address" field.
func EndAddressContainsFold(v string) predicate.Ride {
	return predicate.Ride(sql.FieldContainsFold(FieldEndAddress, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldLTE(FieldStartTime, v))
}

// StartTimeIsNil applies the IsNil predicate on the "start_time" field.
func StartTimeIsNil() predicate.Ride {
	return predicate.Ride(sql.FieldIsNull(FieldStartTime))
}

// StartTimeNotNil applies the NotNil predicate on the "start_time" field.
func StartTimeNotNil() predicate.Ride {
	return predicate.Ride(sql.FieldNotNull(FieldStartTime))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.Ride {
	return predicate.Ride(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.Ride {
	return predicate.Ride(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.Ride {
	return predicate.Ride(sql.FieldNotNull(FieldEndTime))
}

// RevenueEQ applies the EQ predicate on the "revenue" field.
func RevenueEQ(v float64) predicate.Ride {
	return predicate.Ride(sql.FieldEQ(FieldRevenue, v))
}

// RevenueNEQ applies the NEQ predicate on the "revenue" field.
func RevenueNEQ(v float64) predicate.Ride {
	return predicate.Ride(sql.FieldNEQ(FieldRevenue, v))
}

// RevenueIn applies the In predicate on the "revenue" field.
func RevenueIn(vs ...float64) predicate.Ride {
	return predicate.Ride(sql.FieldIn(FieldRevenue, vs...))
}

// RevenueNotIn applies the NotIn predicate on the "revenue" field.
func RevenueNotIn(vs ...float64) predicate.Ride {
	return predicate.Ride(sql.FieldNotIn(FieldRevenue, vs...))
}

// RevenueGT applies the GT predicate on the "revenue" field.
func RevenueGT(v float64) predicate.Ride {
	return predicate.Ride(sql.FieldGT(FieldRevenue, v))
}

// RevenueGTE applies the GTE predicate on the "revenue" field.
func RevenueGTE(v float64) predicate.Ride {
	return predicate.Ride(sql.FieldGTE(FieldRevenue, v))
}

// RevenueLT applies the LT predicate on the "revenue" field.
func RevenueLT(v float64) predicate.Ride {
	return predicate.Ride(sql.FieldLT(FieldRevenue, v))
}

// RevenueLTE applies the LTE predicate on the "revenue" field.
func RevenueLTE(v float64) predicate.Ride {
	return predicate.Ride(sql.FieldLTE(FieldRevenue, v))
}

// RevenueIsNil applies the IsNil predicate on the "revenue" field.
func RevenueIsNil() predicate.Ride {
	return predicate.Ride(sql.FieldIsNull(FieldRevenue))
}

// RevenueNotNil applies the NotNil predicate on the "revenue" field.
func RevenueNotNil() predicate.Ride {
	return predicate.Ride(sql.FieldNotNull(FieldRevenue))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Ride {
	return predicate.Ride(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Ride {
	return predicate.Ride(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVehicle applies the HasEdge predicate on the "vehicle" edge.
func HasVehicle() predicate.Ride {
	return predicate.Ride(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, VehicleTable, VehicleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVehicleWith applies the HasEdge predicate on the "vehicle" edge with a given conditions (other predicates).
func HasVehicleWith(preds ...predicate.Vehicle) predicate.Ride {
	return predicate.Ride(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VehicleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, VehicleTable, VehicleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVehicleLocationHistories applies the HasEdge predicate on the "vehicle_location_histories" edge.
func HasVehicleLocationHistories() predicate.Ride {
	return predicate.Ride(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VehicleLocationHistoriesTable, VehicleLocationHistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVehicleLocationHistoriesWith applies the HasEdge predicate on the "vehicle_location_histories" edge with a given conditions (other predicates).
func HasVehicleLocationHistoriesWith(preds ...predicate.VehicleLocationHistory) predicate.Ride {
	return predicate.Ride(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VehicleLocationHistoriesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VehicleLocationHistoriesTable, VehicleLocationHistoriesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ride) predicate.Ride {
	return predicate.Ride(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ride) predicate.Ride {
	return predicate.Ride(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ride) predicate.Ride {
	return predicate.Ride(func(s *sql.Selector) {
		p(s.Not())
	})
}
