// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/predicate"
	"github.com/kofalt/example-ent-crdb/ent/ride"
	"github.com/kofalt/example-ent-crdb/ent/user"
	"github.com/kofalt/example-ent-crdb/ent/vehicle"
)

// VehicleUpdate is the builder for updating Vehicle entities.
type VehicleUpdate struct {
	config
	hooks    []Hook
	mutation *VehicleMutation
}

// Where appends a list predicates to the VehicleUpdate builder.
func (vu *VehicleUpdate) Where(ps ...predicate.Vehicle) *VehicleUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetCity sets the "city" field.
func (vu *VehicleUpdate) SetCity(s string) *VehicleUpdate {
	vu.mutation.SetCity(s)
	return vu
}

// SetType sets the "type" field.
func (vu *VehicleUpdate) SetType(s string) *VehicleUpdate {
	vu.mutation.SetType(s)
	return vu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableType(s *string) *VehicleUpdate {
	if s != nil {
		vu.SetType(*s)
	}
	return vu
}

// ClearType clears the value of the "type" field.
func (vu *VehicleUpdate) ClearType() *VehicleUpdate {
	vu.mutation.ClearType()
	return vu
}

// SetOwnerID sets the "owner_id" field.
func (vu *VehicleUpdate) SetOwnerID(u uuid.UUID) *VehicleUpdate {
	vu.mutation.SetOwnerID(u)
	return vu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableOwnerID(u *uuid.UUID) *VehicleUpdate {
	if u != nil {
		vu.SetOwnerID(*u)
	}
	return vu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (vu *VehicleUpdate) ClearOwnerID() *VehicleUpdate {
	vu.mutation.ClearOwnerID()
	return vu
}

// SetCreationTime sets the "creation_time" field.
func (vu *VehicleUpdate) SetCreationTime(t time.Time) *VehicleUpdate {
	vu.mutation.SetCreationTime(t)
	return vu
}

// SetNillableCreationTime sets the "creation_time" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableCreationTime(t *time.Time) *VehicleUpdate {
	if t != nil {
		vu.SetCreationTime(*t)
	}
	return vu
}

// ClearCreationTime clears the value of the "creation_time" field.
func (vu *VehicleUpdate) ClearCreationTime() *VehicleUpdate {
	vu.mutation.ClearCreationTime()
	return vu
}

// SetStatus sets the "status" field.
func (vu *VehicleUpdate) SetStatus(s string) *VehicleUpdate {
	vu.mutation.SetStatus(s)
	return vu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableStatus(s *string) *VehicleUpdate {
	if s != nil {
		vu.SetStatus(*s)
	}
	return vu
}

// ClearStatus clears the value of the "status" field.
func (vu *VehicleUpdate) ClearStatus() *VehicleUpdate {
	vu.mutation.ClearStatus()
	return vu
}

// SetCurrentLocation sets the "current_location" field.
func (vu *VehicleUpdate) SetCurrentLocation(s string) *VehicleUpdate {
	vu.mutation.SetCurrentLocation(s)
	return vu
}

// SetNillableCurrentLocation sets the "current_location" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableCurrentLocation(s *string) *VehicleUpdate {
	if s != nil {
		vu.SetCurrentLocation(*s)
	}
	return vu
}

// ClearCurrentLocation clears the value of the "current_location" field.
func (vu *VehicleUpdate) ClearCurrentLocation() *VehicleUpdate {
	vu.mutation.ClearCurrentLocation()
	return vu
}

// SetExt sets the "ext" field.
func (vu *VehicleUpdate) SetExt(m *map[string]interface{}) *VehicleUpdate {
	vu.mutation.SetExt(m)
	return vu
}

// ClearExt clears the value of the "ext" field.
func (vu *VehicleUpdate) ClearExt() *VehicleUpdate {
	vu.mutation.ClearExt()
	return vu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vu *VehicleUpdate) SetUserID(id uuid.UUID) *VehicleUpdate {
	vu.mutation.SetUserID(id)
	return vu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (vu *VehicleUpdate) SetNillableUserID(id *uuid.UUID) *VehicleUpdate {
	if id != nil {
		vu = vu.SetUserID(*id)
	}
	return vu
}

// SetUser sets the "user" edge to the User entity.
func (vu *VehicleUpdate) SetUser(u *User) *VehicleUpdate {
	return vu.SetUserID(u.ID)
}

// AddRideIDs adds the "rides" edge to the Ride entity by IDs.
func (vu *VehicleUpdate) AddRideIDs(ids ...uuid.UUID) *VehicleUpdate {
	vu.mutation.AddRideIDs(ids...)
	return vu
}

// AddRides adds the "rides" edges to the Ride entity.
func (vu *VehicleUpdate) AddRides(r ...*Ride) *VehicleUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vu.AddRideIDs(ids...)
}

// Mutation returns the VehicleMutation object of the builder.
func (vu *VehicleUpdate) Mutation() *VehicleMutation {
	return vu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vu *VehicleUpdate) ClearUser() *VehicleUpdate {
	vu.mutation.ClearUser()
	return vu
}

// ClearRides clears all "rides" edges to the Ride entity.
func (vu *VehicleUpdate) ClearRides() *VehicleUpdate {
	vu.mutation.ClearRides()
	return vu
}

// RemoveRideIDs removes the "rides" edge to Ride entities by IDs.
func (vu *VehicleUpdate) RemoveRideIDs(ids ...uuid.UUID) *VehicleUpdate {
	vu.mutation.RemoveRideIDs(ids...)
	return vu
}

// RemoveRides removes "rides" edges to Ride entities.
func (vu *VehicleUpdate) RemoveRides(r ...*Ride) *VehicleUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vu.RemoveRideIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VehicleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, VehicleMutation](ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VehicleUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VehicleUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VehicleUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VehicleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehicle.Table,
			Columns: vehicle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vehicle.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.City(); ok {
		_spec.SetField(vehicle.FieldCity, field.TypeString, value)
	}
	if value, ok := vu.mutation.GetType(); ok {
		_spec.SetField(vehicle.FieldType, field.TypeString, value)
	}
	if vu.mutation.TypeCleared() {
		_spec.ClearField(vehicle.FieldType, field.TypeString)
	}
	if value, ok := vu.mutation.CreationTime(); ok {
		_spec.SetField(vehicle.FieldCreationTime, field.TypeTime, value)
	}
	if vu.mutation.CreationTimeCleared() {
		_spec.ClearField(vehicle.FieldCreationTime, field.TypeTime)
	}
	if value, ok := vu.mutation.Status(); ok {
		_spec.SetField(vehicle.FieldStatus, field.TypeString, value)
	}
	if vu.mutation.StatusCleared() {
		_spec.ClearField(vehicle.FieldStatus, field.TypeString)
	}
	if value, ok := vu.mutation.CurrentLocation(); ok {
		_spec.SetField(vehicle.FieldCurrentLocation, field.TypeString, value)
	}
	if vu.mutation.CurrentLocationCleared() {
		_spec.ClearField(vehicle.FieldCurrentLocation, field.TypeString)
	}
	if value, ok := vu.mutation.Ext(); ok {
		_spec.SetField(vehicle.FieldExt, field.TypeJSON, value)
	}
	if vu.mutation.ExtCleared() {
		_spec.ClearField(vehicle.FieldExt, field.TypeJSON)
	}
	if vu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.UserTable,
			Columns: []string{vehicle.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.UserTable,
			Columns: []string{vehicle.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.RidesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vehicle.RidesTable,
			Columns: []string{vehicle.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedRidesIDs(); len(nodes) > 0 && !vu.mutation.RidesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vehicle.RidesTable,
			Columns: []string{vehicle.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RidesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vehicle.RidesTable,
			Columns: []string{vehicle.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VehicleUpdateOne is the builder for updating a single Vehicle entity.
type VehicleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VehicleMutation
}

// SetCity sets the "city" field.
func (vuo *VehicleUpdateOne) SetCity(s string) *VehicleUpdateOne {
	vuo.mutation.SetCity(s)
	return vuo
}

// SetType sets the "type" field.
func (vuo *VehicleUpdateOne) SetType(s string) *VehicleUpdateOne {
	vuo.mutation.SetType(s)
	return vuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableType(s *string) *VehicleUpdateOne {
	if s != nil {
		vuo.SetType(*s)
	}
	return vuo
}

// ClearType clears the value of the "type" field.
func (vuo *VehicleUpdateOne) ClearType() *VehicleUpdateOne {
	vuo.mutation.ClearType()
	return vuo
}

// SetOwnerID sets the "owner_id" field.
func (vuo *VehicleUpdateOne) SetOwnerID(u uuid.UUID) *VehicleUpdateOne {
	vuo.mutation.SetOwnerID(u)
	return vuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableOwnerID(u *uuid.UUID) *VehicleUpdateOne {
	if u != nil {
		vuo.SetOwnerID(*u)
	}
	return vuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (vuo *VehicleUpdateOne) ClearOwnerID() *VehicleUpdateOne {
	vuo.mutation.ClearOwnerID()
	return vuo
}

// SetCreationTime sets the "creation_time" field.
func (vuo *VehicleUpdateOne) SetCreationTime(t time.Time) *VehicleUpdateOne {
	vuo.mutation.SetCreationTime(t)
	return vuo
}

// SetNillableCreationTime sets the "creation_time" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableCreationTime(t *time.Time) *VehicleUpdateOne {
	if t != nil {
		vuo.SetCreationTime(*t)
	}
	return vuo
}

// ClearCreationTime clears the value of the "creation_time" field.
func (vuo *VehicleUpdateOne) ClearCreationTime() *VehicleUpdateOne {
	vuo.mutation.ClearCreationTime()
	return vuo
}

// SetStatus sets the "status" field.
func (vuo *VehicleUpdateOne) SetStatus(s string) *VehicleUpdateOne {
	vuo.mutation.SetStatus(s)
	return vuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableStatus(s *string) *VehicleUpdateOne {
	if s != nil {
		vuo.SetStatus(*s)
	}
	return vuo
}

// ClearStatus clears the value of the "status" field.
func (vuo *VehicleUpdateOne) ClearStatus() *VehicleUpdateOne {
	vuo.mutation.ClearStatus()
	return vuo
}

// SetCurrentLocation sets the "current_location" field.
func (vuo *VehicleUpdateOne) SetCurrentLocation(s string) *VehicleUpdateOne {
	vuo.mutation.SetCurrentLocation(s)
	return vuo
}

// SetNillableCurrentLocation sets the "current_location" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableCurrentLocation(s *string) *VehicleUpdateOne {
	if s != nil {
		vuo.SetCurrentLocation(*s)
	}
	return vuo
}

// ClearCurrentLocation clears the value of the "current_location" field.
func (vuo *VehicleUpdateOne) ClearCurrentLocation() *VehicleUpdateOne {
	vuo.mutation.ClearCurrentLocation()
	return vuo
}

// SetExt sets the "ext" field.
func (vuo *VehicleUpdateOne) SetExt(m *map[string]interface{}) *VehicleUpdateOne {
	vuo.mutation.SetExt(m)
	return vuo
}

// ClearExt clears the value of the "ext" field.
func (vuo *VehicleUpdateOne) ClearExt() *VehicleUpdateOne {
	vuo.mutation.ClearExt()
	return vuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vuo *VehicleUpdateOne) SetUserID(id uuid.UUID) *VehicleUpdateOne {
	vuo.mutation.SetUserID(id)
	return vuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableUserID(id *uuid.UUID) *VehicleUpdateOne {
	if id != nil {
		vuo = vuo.SetUserID(*id)
	}
	return vuo
}

// SetUser sets the "user" edge to the User entity.
func (vuo *VehicleUpdateOne) SetUser(u *User) *VehicleUpdateOne {
	return vuo.SetUserID(u.ID)
}

// AddRideIDs adds the "rides" edge to the Ride entity by IDs.
func (vuo *VehicleUpdateOne) AddRideIDs(ids ...uuid.UUID) *VehicleUpdateOne {
	vuo.mutation.AddRideIDs(ids...)
	return vuo
}

// AddRides adds the "rides" edges to the Ride entity.
func (vuo *VehicleUpdateOne) AddRides(r ...*Ride) *VehicleUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vuo.AddRideIDs(ids...)
}

// Mutation returns the VehicleMutation object of the builder.
func (vuo *VehicleUpdateOne) Mutation() *VehicleMutation {
	return vuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vuo *VehicleUpdateOne) ClearUser() *VehicleUpdateOne {
	vuo.mutation.ClearUser()
	return vuo
}

// ClearRides clears all "rides" edges to the Ride entity.
func (vuo *VehicleUpdateOne) ClearRides() *VehicleUpdateOne {
	vuo.mutation.ClearRides()
	return vuo
}

// RemoveRideIDs removes the "rides" edge to Ride entities by IDs.
func (vuo *VehicleUpdateOne) RemoveRideIDs(ids ...uuid.UUID) *VehicleUpdateOne {
	vuo.mutation.RemoveRideIDs(ids...)
	return vuo
}

// RemoveRides removes "rides" edges to Ride entities.
func (vuo *VehicleUpdateOne) RemoveRides(r ...*Ride) *VehicleUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vuo.RemoveRideIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VehicleUpdateOne) Select(field string, fields ...string) *VehicleUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vehicle entity.
func (vuo *VehicleUpdateOne) Save(ctx context.Context) (*Vehicle, error) {
	return withHooks[*Vehicle, VehicleMutation](ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VehicleUpdateOne) SaveX(ctx context.Context) *Vehicle {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VehicleUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VehicleUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VehicleUpdateOne) sqlSave(ctx context.Context) (_node *Vehicle, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehicle.Table,
			Columns: vehicle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vehicle.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vehicle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehicle.FieldID)
		for _, f := range fields {
			if !vehicle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vehicle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.City(); ok {
		_spec.SetField(vehicle.FieldCity, field.TypeString, value)
	}
	if value, ok := vuo.mutation.GetType(); ok {
		_spec.SetField(vehicle.FieldType, field.TypeString, value)
	}
	if vuo.mutation.TypeCleared() {
		_spec.ClearField(vehicle.FieldType, field.TypeString)
	}
	if value, ok := vuo.mutation.CreationTime(); ok {
		_spec.SetField(vehicle.FieldCreationTime, field.TypeTime, value)
	}
	if vuo.mutation.CreationTimeCleared() {
		_spec.ClearField(vehicle.FieldCreationTime, field.TypeTime)
	}
	if value, ok := vuo.mutation.Status(); ok {
		_spec.SetField(vehicle.FieldStatus, field.TypeString, value)
	}
	if vuo.mutation.StatusCleared() {
		_spec.ClearField(vehicle.FieldStatus, field.TypeString)
	}
	if value, ok := vuo.mutation.CurrentLocation(); ok {
		_spec.SetField(vehicle.FieldCurrentLocation, field.TypeString, value)
	}
	if vuo.mutation.CurrentLocationCleared() {
		_spec.ClearField(vehicle.FieldCurrentLocation, field.TypeString)
	}
	if value, ok := vuo.mutation.Ext(); ok {
		_spec.SetField(vehicle.FieldExt, field.TypeJSON, value)
	}
	if vuo.mutation.ExtCleared() {
		_spec.ClearField(vehicle.FieldExt, field.TypeJSON)
	}
	if vuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.UserTable,
			Columns: []string{vehicle.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.UserTable,
			Columns: []string{vehicle.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.RidesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vehicle.RidesTable,
			Columns: []string{vehicle.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedRidesIDs(); len(nodes) > 0 && !vuo.mutation.RidesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vehicle.RidesTable,
			Columns: []string{vehicle.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RidesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vehicle.RidesTable,
			Columns: []string{vehicle.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vehicle{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
