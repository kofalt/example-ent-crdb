// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/ride"
	"github.com/kofalt/example-ent-crdb/ent/vehiclelocationhistory"
)

// VehicleLocationHistoryCreate is the builder for creating a VehicleLocationHistory entity.
type VehicleLocationHistoryCreate struct {
	config
	mutation *VehicleLocationHistoryMutation
	hooks    []Hook
}

// SetCity sets the "city" field.
func (vlhc *VehicleLocationHistoryCreate) SetCity(s string) *VehicleLocationHistoryCreate {
	vlhc.mutation.SetCity(s)
	return vlhc
}

// SetRideID sets the "ride_id" field.
func (vlhc *VehicleLocationHistoryCreate) SetRideID(u uuid.UUID) *VehicleLocationHistoryCreate {
	vlhc.mutation.SetRideID(u)
	return vlhc
}

// SetTimestamp sets the "timestamp" field.
func (vlhc *VehicleLocationHistoryCreate) SetTimestamp(t time.Time) *VehicleLocationHistoryCreate {
	vlhc.mutation.SetTimestamp(t)
	return vlhc
}

// SetLat sets the "lat" field.
func (vlhc *VehicleLocationHistoryCreate) SetLat(f float64) *VehicleLocationHistoryCreate {
	vlhc.mutation.SetLat(f)
	return vlhc
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (vlhc *VehicleLocationHistoryCreate) SetNillableLat(f *float64) *VehicleLocationHistoryCreate {
	if f != nil {
		vlhc.SetLat(*f)
	}
	return vlhc
}

// SetLong sets the "long" field.
func (vlhc *VehicleLocationHistoryCreate) SetLong(f float64) *VehicleLocationHistoryCreate {
	vlhc.mutation.SetLong(f)
	return vlhc
}

// SetNillableLong sets the "long" field if the given value is not nil.
func (vlhc *VehicleLocationHistoryCreate) SetNillableLong(f *float64) *VehicleLocationHistoryCreate {
	if f != nil {
		vlhc.SetLong(*f)
	}
	return vlhc
}

// SetID sets the "id" field.
func (vlhc *VehicleLocationHistoryCreate) SetID(u uuid.UUID) *VehicleLocationHistoryCreate {
	vlhc.mutation.SetID(u)
	return vlhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vlhc *VehicleLocationHistoryCreate) SetNillableID(u *uuid.UUID) *VehicleLocationHistoryCreate {
	if u != nil {
		vlhc.SetID(*u)
	}
	return vlhc
}

// SetRidesID sets the "rides" edge to the Ride entity by ID.
func (vlhc *VehicleLocationHistoryCreate) SetRidesID(id uuid.UUID) *VehicleLocationHistoryCreate {
	vlhc.mutation.SetRidesID(id)
	return vlhc
}

// SetRides sets the "rides" edge to the Ride entity.
func (vlhc *VehicleLocationHistoryCreate) SetRides(r *Ride) *VehicleLocationHistoryCreate {
	return vlhc.SetRidesID(r.ID)
}

// Mutation returns the VehicleLocationHistoryMutation object of the builder.
func (vlhc *VehicleLocationHistoryCreate) Mutation() *VehicleLocationHistoryMutation {
	return vlhc.mutation
}

// Save creates the VehicleLocationHistory in the database.
func (vlhc *VehicleLocationHistoryCreate) Save(ctx context.Context) (*VehicleLocationHistory, error) {
	vlhc.defaults()
	return withHooks[*VehicleLocationHistory, VehicleLocationHistoryMutation](ctx, vlhc.sqlSave, vlhc.mutation, vlhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vlhc *VehicleLocationHistoryCreate) SaveX(ctx context.Context) *VehicleLocationHistory {
	v, err := vlhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vlhc *VehicleLocationHistoryCreate) Exec(ctx context.Context) error {
	_, err := vlhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlhc *VehicleLocationHistoryCreate) ExecX(ctx context.Context) {
	if err := vlhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vlhc *VehicleLocationHistoryCreate) defaults() {
	if _, ok := vlhc.mutation.ID(); !ok {
		v := vehiclelocationhistory.DefaultID()
		vlhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vlhc *VehicleLocationHistoryCreate) check() error {
	if _, ok := vlhc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "VehicleLocationHistory.city"`)}
	}
	if _, ok := vlhc.mutation.RideID(); !ok {
		return &ValidationError{Name: "ride_id", err: errors.New(`ent: missing required field "VehicleLocationHistory.ride_id"`)}
	}
	if _, ok := vlhc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "VehicleLocationHistory.timestamp"`)}
	}
	if _, ok := vlhc.mutation.RidesID(); !ok {
		return &ValidationError{Name: "rides", err: errors.New(`ent: missing required edge "VehicleLocationHistory.rides"`)}
	}
	return nil
}

func (vlhc *VehicleLocationHistoryCreate) sqlSave(ctx context.Context) (*VehicleLocationHistory, error) {
	if err := vlhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vlhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vlhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vlhc.mutation.id = &_node.ID
	vlhc.mutation.done = true
	return _node, nil
}

func (vlhc *VehicleLocationHistoryCreate) createSpec() (*VehicleLocationHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &VehicleLocationHistory{config: vlhc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vehiclelocationhistory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vehiclelocationhistory.FieldID,
			},
		}
	)
	if id, ok := vlhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vlhc.mutation.City(); ok {
		_spec.SetField(vehiclelocationhistory.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := vlhc.mutation.Timestamp(); ok {
		_spec.SetField(vehiclelocationhistory.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := vlhc.mutation.Lat(); ok {
		_spec.SetField(vehiclelocationhistory.FieldLat, field.TypeFloat64, value)
		_node.Lat = value
	}
	if value, ok := vlhc.mutation.Long(); ok {
		_spec.SetField(vehiclelocationhistory.FieldLong, field.TypeFloat64, value)
		_node.Long = value
	}
	if nodes := vlhc.mutation.RidesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehiclelocationhistory.RidesTable,
			Columns: []string{vehiclelocationhistory.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RideID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VehicleLocationHistoryCreateBulk is the builder for creating many VehicleLocationHistory entities in bulk.
type VehicleLocationHistoryCreateBulk struct {
	config
	builders []*VehicleLocationHistoryCreate
}

// Save creates the VehicleLocationHistory entities in the database.
func (vlhcb *VehicleLocationHistoryCreateBulk) Save(ctx context.Context) ([]*VehicleLocationHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vlhcb.builders))
	nodes := make([]*VehicleLocationHistory, len(vlhcb.builders))
	mutators := make([]Mutator, len(vlhcb.builders))
	for i := range vlhcb.builders {
		func(i int, root context.Context) {
			builder := vlhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VehicleLocationHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vlhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vlhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vlhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vlhcb *VehicleLocationHistoryCreateBulk) SaveX(ctx context.Context) []*VehicleLocationHistory {
	v, err := vlhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vlhcb *VehicleLocationHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := vlhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlhcb *VehicleLocationHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := vlhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
