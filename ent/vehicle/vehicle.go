// Code generated by ent, DO NOT EDIT.

package vehicle

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the vehicle type in the database.
	Label = "vehicle"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldCreationTime holds the string denoting the creation_time field in the database.
	FieldCreationTime = "creation_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCurrentLocation holds the string denoting the current_location field in the database.
	FieldCurrentLocation = "current_location"
	// FieldExt holds the string denoting the ext field in the database.
	FieldExt = "ext"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeRides holds the string denoting the rides edge name in mutations.
	EdgeRides = "rides"
	// Table holds the table name of the vehicle in the database.
	Table = "vehicles"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "vehicles"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "owner_id"
	// RidesTable is the table that holds the rides relation/edge.
	RidesTable = "rides"
	// RidesInverseTable is the table name for the Ride entity.
	// It exists in this package in order to avoid circular dependency with the "ride" package.
	RidesInverseTable = "rides"
	// RidesColumn is the table column denoting the rides relation/edge.
	RidesColumn = "vehicle_id"
)

// Columns holds all SQL columns for vehicle fields.
var Columns = []string{
	FieldID,
	FieldCity,
	FieldType,
	FieldOwnerID,
	FieldCreationTime,
	FieldStatus,
	FieldCurrentLocation,
	FieldExt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
