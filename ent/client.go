// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/migrate"

	"github.com/kofalt/example-ent-crdb/ent/ride"
	"github.com/kofalt/example-ent-crdb/ent/user"
	"github.com/kofalt/example-ent-crdb/ent/userpromocode"
	"github.com/kofalt/example-ent-crdb/ent/vehicle"
	"github.com/kofalt/example-ent-crdb/ent/vehiclelocationhistory"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Ride is the client for interacting with the Ride builders.
	Ride *RideClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserPromoCode is the client for interacting with the UserPromoCode builders.
	UserPromoCode *UserPromoCodeClient
	// Vehicle is the client for interacting with the Vehicle builders.
	Vehicle *VehicleClient
	// VehicleLocationHistory is the client for interacting with the VehicleLocationHistory builders.
	VehicleLocationHistory *VehicleLocationHistoryClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Ride = NewRideClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserPromoCode = NewUserPromoCodeClient(c.config)
	c.Vehicle = NewVehicleClient(c.config)
	c.VehicleLocationHistory = NewVehicleLocationHistoryClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		Ride:                   NewRideClient(cfg),
		User:                   NewUserClient(cfg),
		UserPromoCode:          NewUserPromoCodeClient(cfg),
		Vehicle:                NewVehicleClient(cfg),
		VehicleLocationHistory: NewVehicleLocationHistoryClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		Ride:                   NewRideClient(cfg),
		User:                   NewUserClient(cfg),
		UserPromoCode:          NewUserPromoCodeClient(cfg),
		Vehicle:                NewVehicleClient(cfg),
		VehicleLocationHistory: NewVehicleLocationHistoryClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Ride.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Ride.Use(hooks...)
	c.User.Use(hooks...)
	c.UserPromoCode.Use(hooks...)
	c.Vehicle.Use(hooks...)
	c.VehicleLocationHistory.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Ride.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
	c.UserPromoCode.Intercept(interceptors...)
	c.Vehicle.Intercept(interceptors...)
	c.VehicleLocationHistory.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *RideMutation:
		return c.Ride.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserPromoCodeMutation:
		return c.UserPromoCode.mutate(ctx, m)
	case *VehicleMutation:
		return c.Vehicle.mutate(ctx, m)
	case *VehicleLocationHistoryMutation:
		return c.VehicleLocationHistory.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// RideClient is a client for the Ride schema.
type RideClient struct {
	config
}

// NewRideClient returns a client for the Ride from the given config.
func NewRideClient(c config) *RideClient {
	return &RideClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ride.Hooks(f(g(h())))`.
func (c *RideClient) Use(hooks ...Hook) {
	c.hooks.Ride = append(c.hooks.Ride, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ride.Intercept(f(g(h())))`.
func (c *RideClient) Intercept(interceptors ...Interceptor) {
	c.inters.Ride = append(c.inters.Ride, interceptors...)
}

// Create returns a builder for creating a Ride entity.
func (c *RideClient) Create() *RideCreate {
	mutation := newRideMutation(c.config, OpCreate)
	return &RideCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ride entities.
func (c *RideClient) CreateBulk(builders ...*RideCreate) *RideCreateBulk {
	return &RideCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ride.
func (c *RideClient) Update() *RideUpdate {
	mutation := newRideMutation(c.config, OpUpdate)
	return &RideUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RideClient) UpdateOne(r *Ride) *RideUpdateOne {
	mutation := newRideMutation(c.config, OpUpdateOne, withRide(r))
	return &RideUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RideClient) UpdateOneID(id uuid.UUID) *RideUpdateOne {
	mutation := newRideMutation(c.config, OpUpdateOne, withRideID(id))
	return &RideUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ride.
func (c *RideClient) Delete() *RideDelete {
	mutation := newRideMutation(c.config, OpDelete)
	return &RideDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RideClient) DeleteOne(r *Ride) *RideDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RideClient) DeleteOneID(id uuid.UUID) *RideDeleteOne {
	builder := c.Delete().Where(ride.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RideDeleteOne{builder}
}

// Query returns a query builder for Ride.
func (c *RideClient) Query() *RideQuery {
	return &RideQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRide},
		inters: c.Interceptors(),
	}
}

// Get returns a Ride entity by its id.
func (c *RideClient) Get(ctx context.Context, id uuid.UUID) (*Ride, error) {
	return c.Query().Where(ride.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RideClient) GetX(ctx context.Context, id uuid.UUID) *Ride {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Ride.
func (c *RideClient) QueryUser(r *Ride) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ride.Table, ride.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ride.UserTable, ride.UserColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVehicle queries the vehicle edge of a Ride.
func (c *RideClient) QueryVehicle(r *Ride) *VehicleQuery {
	query := (&VehicleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ride.Table, ride.FieldID, id),
			sqlgraph.To(vehicle.Table, vehicle.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ride.VehicleTable, ride.VehicleColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVehicleLocationHistories queries the vehicle_location_histories edge of a Ride.
func (c *RideClient) QueryVehicleLocationHistories(r *Ride) *VehicleLocationHistoryQuery {
	query := (&VehicleLocationHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ride.Table, ride.FieldID, id),
			sqlgraph.To(vehiclelocationhistory.Table, vehiclelocationhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ride.VehicleLocationHistoriesTable, ride.VehicleLocationHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RideClient) Hooks() []Hook {
	return c.hooks.Ride
}

// Interceptors returns the client interceptors.
func (c *RideClient) Interceptors() []Interceptor {
	return c.inters.Ride
}

func (c *RideClient) mutate(ctx context.Context, m *RideMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RideCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RideUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RideUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RideDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Ride mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVehicles queries the vehicles edge of a User.
func (c *UserClient) QueryVehicles(u *User) *VehicleQuery {
	query := (&VehicleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(vehicle.Table, vehicle.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.VehiclesTable, user.VehiclesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRides queries the rides edge of a User.
func (c *UserClient) QueryRides(u *User) *RideQuery {
	query := (&RideClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(ride.Table, ride.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.RidesTable, user.RidesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserPromoCodes queries the user_promo_codes edge of a User.
func (c *UserClient) QueryUserPromoCodes(u *User) *UserPromoCodeQuery {
	query := (&UserPromoCodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userpromocode.Table, userpromocode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserPromoCodesTable, user.UserPromoCodesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserPromoCodeClient is a client for the UserPromoCode schema.
type UserPromoCodeClient struct {
	config
}

// NewUserPromoCodeClient returns a client for the UserPromoCode from the given config.
func NewUserPromoCodeClient(c config) *UserPromoCodeClient {
	return &UserPromoCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userpromocode.Hooks(f(g(h())))`.
func (c *UserPromoCodeClient) Use(hooks ...Hook) {
	c.hooks.UserPromoCode = append(c.hooks.UserPromoCode, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userpromocode.Intercept(f(g(h())))`.
func (c *UserPromoCodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserPromoCode = append(c.inters.UserPromoCode, interceptors...)
}

// Create returns a builder for creating a UserPromoCode entity.
func (c *UserPromoCodeClient) Create() *UserPromoCodeCreate {
	mutation := newUserPromoCodeMutation(c.config, OpCreate)
	return &UserPromoCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPromoCode entities.
func (c *UserPromoCodeClient) CreateBulk(builders ...*UserPromoCodeCreate) *UserPromoCodeCreateBulk {
	return &UserPromoCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPromoCode.
func (c *UserPromoCodeClient) Update() *UserPromoCodeUpdate {
	mutation := newUserPromoCodeMutation(c.config, OpUpdate)
	return &UserPromoCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPromoCodeClient) UpdateOne(upc *UserPromoCode) *UserPromoCodeUpdateOne {
	mutation := newUserPromoCodeMutation(c.config, OpUpdateOne, withUserPromoCode(upc))
	return &UserPromoCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserPromoCodeClient) UpdateOneID(id uuid.UUID) *UserPromoCodeUpdateOne {
	mutation := newUserPromoCodeMutation(c.config, OpUpdateOne, withUserPromoCodeID(id))
	return &UserPromoCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPromoCode.
func (c *UserPromoCodeClient) Delete() *UserPromoCodeDelete {
	mutation := newUserPromoCodeMutation(c.config, OpDelete)
	return &UserPromoCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserPromoCodeClient) DeleteOne(upc *UserPromoCode) *UserPromoCodeDeleteOne {
	return c.DeleteOneID(upc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserPromoCodeClient) DeleteOneID(id uuid.UUID) *UserPromoCodeDeleteOne {
	builder := c.Delete().Where(userpromocode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserPromoCodeDeleteOne{builder}
}

// Query returns a query builder for UserPromoCode.
func (c *UserPromoCodeClient) Query() *UserPromoCodeQuery {
	return &UserPromoCodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserPromoCode},
		inters: c.Interceptors(),
	}
}

// Get returns a UserPromoCode entity by its id.
func (c *UserPromoCodeClient) Get(ctx context.Context, id uuid.UUID) (*UserPromoCode, error) {
	return c.Query().Where(userpromocode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserPromoCodeClient) GetX(ctx context.Context, id uuid.UUID) *UserPromoCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserPromoCode.
func (c *UserPromoCodeClient) QueryUser(upc *UserPromoCode) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := upc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userpromocode.Table, userpromocode.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userpromocode.UserTable, userpromocode.UserColumn),
		)
		fromV = sqlgraph.Neighbors(upc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserPromoCodeClient) Hooks() []Hook {
	return c.hooks.UserPromoCode
}

// Interceptors returns the client interceptors.
func (c *UserPromoCodeClient) Interceptors() []Interceptor {
	return c.inters.UserPromoCode
}

func (c *UserPromoCodeClient) mutate(ctx context.Context, m *UserPromoCodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserPromoCodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserPromoCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserPromoCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserPromoCodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserPromoCode mutation op: %q", m.Op())
	}
}

// VehicleClient is a client for the Vehicle schema.
type VehicleClient struct {
	config
}

// NewVehicleClient returns a client for the Vehicle from the given config.
func NewVehicleClient(c config) *VehicleClient {
	return &VehicleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vehicle.Hooks(f(g(h())))`.
func (c *VehicleClient) Use(hooks ...Hook) {
	c.hooks.Vehicle = append(c.hooks.Vehicle, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vehicle.Intercept(f(g(h())))`.
func (c *VehicleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Vehicle = append(c.inters.Vehicle, interceptors...)
}

// Create returns a builder for creating a Vehicle entity.
func (c *VehicleClient) Create() *VehicleCreate {
	mutation := newVehicleMutation(c.config, OpCreate)
	return &VehicleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Vehicle entities.
func (c *VehicleClient) CreateBulk(builders ...*VehicleCreate) *VehicleCreateBulk {
	return &VehicleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Vehicle.
func (c *VehicleClient) Update() *VehicleUpdate {
	mutation := newVehicleMutation(c.config, OpUpdate)
	return &VehicleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VehicleClient) UpdateOne(v *Vehicle) *VehicleUpdateOne {
	mutation := newVehicleMutation(c.config, OpUpdateOne, withVehicle(v))
	return &VehicleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VehicleClient) UpdateOneID(id uuid.UUID) *VehicleUpdateOne {
	mutation := newVehicleMutation(c.config, OpUpdateOne, withVehicleID(id))
	return &VehicleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Vehicle.
func (c *VehicleClient) Delete() *VehicleDelete {
	mutation := newVehicleMutation(c.config, OpDelete)
	return &VehicleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VehicleClient) DeleteOne(v *Vehicle) *VehicleDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VehicleClient) DeleteOneID(id uuid.UUID) *VehicleDeleteOne {
	builder := c.Delete().Where(vehicle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VehicleDeleteOne{builder}
}

// Query returns a query builder for Vehicle.
func (c *VehicleClient) Query() *VehicleQuery {
	return &VehicleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVehicle},
		inters: c.Interceptors(),
	}
}

// Get returns a Vehicle entity by its id.
func (c *VehicleClient) Get(ctx context.Context, id uuid.UUID) (*Vehicle, error) {
	return c.Query().Where(vehicle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VehicleClient) GetX(ctx context.Context, id uuid.UUID) *Vehicle {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Vehicle.
func (c *VehicleClient) QueryUser(v *Vehicle) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicle.Table, vehicle.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vehicle.UserTable, vehicle.UserColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRides queries the rides edge of a Vehicle.
func (c *VehicleClient) QueryRides(v *Vehicle) *RideQuery {
	query := (&RideClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicle.Table, vehicle.FieldID, id),
			sqlgraph.To(ride.Table, ride.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, vehicle.RidesTable, vehicle.RidesColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VehicleClient) Hooks() []Hook {
	return c.hooks.Vehicle
}

// Interceptors returns the client interceptors.
func (c *VehicleClient) Interceptors() []Interceptor {
	return c.inters.Vehicle
}

func (c *VehicleClient) mutate(ctx context.Context, m *VehicleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VehicleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VehicleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VehicleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VehicleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Vehicle mutation op: %q", m.Op())
	}
}

// VehicleLocationHistoryClient is a client for the VehicleLocationHistory schema.
type VehicleLocationHistoryClient struct {
	config
}

// NewVehicleLocationHistoryClient returns a client for the VehicleLocationHistory from the given config.
func NewVehicleLocationHistoryClient(c config) *VehicleLocationHistoryClient {
	return &VehicleLocationHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vehiclelocationhistory.Hooks(f(g(h())))`.
func (c *VehicleLocationHistoryClient) Use(hooks ...Hook) {
	c.hooks.VehicleLocationHistory = append(c.hooks.VehicleLocationHistory, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vehiclelocationhistory.Intercept(f(g(h())))`.
func (c *VehicleLocationHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.VehicleLocationHistory = append(c.inters.VehicleLocationHistory, interceptors...)
}

// Create returns a builder for creating a VehicleLocationHistory entity.
func (c *VehicleLocationHistoryClient) Create() *VehicleLocationHistoryCreate {
	mutation := newVehicleLocationHistoryMutation(c.config, OpCreate)
	return &VehicleLocationHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VehicleLocationHistory entities.
func (c *VehicleLocationHistoryClient) CreateBulk(builders ...*VehicleLocationHistoryCreate) *VehicleLocationHistoryCreateBulk {
	return &VehicleLocationHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VehicleLocationHistory.
func (c *VehicleLocationHistoryClient) Update() *VehicleLocationHistoryUpdate {
	mutation := newVehicleLocationHistoryMutation(c.config, OpUpdate)
	return &VehicleLocationHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VehicleLocationHistoryClient) UpdateOne(vlh *VehicleLocationHistory) *VehicleLocationHistoryUpdateOne {
	mutation := newVehicleLocationHistoryMutation(c.config, OpUpdateOne, withVehicleLocationHistory(vlh))
	return &VehicleLocationHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VehicleLocationHistoryClient) UpdateOneID(id uuid.UUID) *VehicleLocationHistoryUpdateOne {
	mutation := newVehicleLocationHistoryMutation(c.config, OpUpdateOne, withVehicleLocationHistoryID(id))
	return &VehicleLocationHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VehicleLocationHistory.
func (c *VehicleLocationHistoryClient) Delete() *VehicleLocationHistoryDelete {
	mutation := newVehicleLocationHistoryMutation(c.config, OpDelete)
	return &VehicleLocationHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VehicleLocationHistoryClient) DeleteOne(vlh *VehicleLocationHistory) *VehicleLocationHistoryDeleteOne {
	return c.DeleteOneID(vlh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VehicleLocationHistoryClient) DeleteOneID(id uuid.UUID) *VehicleLocationHistoryDeleteOne {
	builder := c.Delete().Where(vehiclelocationhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VehicleLocationHistoryDeleteOne{builder}
}

// Query returns a query builder for VehicleLocationHistory.
func (c *VehicleLocationHistoryClient) Query() *VehicleLocationHistoryQuery {
	return &VehicleLocationHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVehicleLocationHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a VehicleLocationHistory entity by its id.
func (c *VehicleLocationHistoryClient) Get(ctx context.Context, id uuid.UUID) (*VehicleLocationHistory, error) {
	return c.Query().Where(vehiclelocationhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VehicleLocationHistoryClient) GetX(ctx context.Context, id uuid.UUID) *VehicleLocationHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRides queries the rides edge of a VehicleLocationHistory.
func (c *VehicleLocationHistoryClient) QueryRides(vlh *VehicleLocationHistory) *RideQuery {
	query := (&RideClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vlh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehiclelocationhistory.Table, vehiclelocationhistory.FieldID, id),
			sqlgraph.To(ride.Table, ride.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vehiclelocationhistory.RidesTable, vehiclelocationhistory.RidesColumn),
		)
		fromV = sqlgraph.Neighbors(vlh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VehicleLocationHistoryClient) Hooks() []Hook {
	return c.hooks.VehicleLocationHistory
}

// Interceptors returns the client interceptors.
func (c *VehicleLocationHistoryClient) Interceptors() []Interceptor {
	return c.inters.VehicleLocationHistory
}

func (c *VehicleLocationHistoryClient) mutate(ctx context.Context, m *VehicleLocationHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VehicleLocationHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VehicleLocationHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VehicleLocationHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VehicleLocationHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VehicleLocationHistory mutation op: %q", m.Op())
	}
}
