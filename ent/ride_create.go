// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/ride"
	"github.com/kofalt/example-ent-crdb/ent/user"
	"github.com/kofalt/example-ent-crdb/ent/vehicle"
	"github.com/kofalt/example-ent-crdb/ent/vehiclelocationhistory"
)

// RideCreate is the builder for creating a Ride entity.
type RideCreate struct {
	config
	mutation *RideMutation
	hooks    []Hook
}

// SetCity sets the "city" field.
func (rc *RideCreate) SetCity(s string) *RideCreate {
	rc.mutation.SetCity(s)
	return rc
}

// SetVehicleCity sets the "vehicle_city" field.
func (rc *RideCreate) SetVehicleCity(s string) *RideCreate {
	rc.mutation.SetVehicleCity(s)
	return rc
}

// SetNillableVehicleCity sets the "vehicle_city" field if the given value is not nil.
func (rc *RideCreate) SetNillableVehicleCity(s *string) *RideCreate {
	if s != nil {
		rc.SetVehicleCity(*s)
	}
	return rc
}

// SetRiderID sets the "rider_id" field.
func (rc *RideCreate) SetRiderID(u uuid.UUID) *RideCreate {
	rc.mutation.SetRiderID(u)
	return rc
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (rc *RideCreate) SetNillableRiderID(u *uuid.UUID) *RideCreate {
	if u != nil {
		rc.SetRiderID(*u)
	}
	return rc
}

// SetVehicleID sets the "vehicle_id" field.
func (rc *RideCreate) SetVehicleID(u uuid.UUID) *RideCreate {
	rc.mutation.SetVehicleID(u)
	return rc
}

// SetNillableVehicleID sets the "vehicle_id" field if the given value is not nil.
func (rc *RideCreate) SetNillableVehicleID(u *uuid.UUID) *RideCreate {
	if u != nil {
		rc.SetVehicleID(*u)
	}
	return rc
}

// SetStartAddress sets the "start_address" field.
func (rc *RideCreate) SetStartAddress(s string) *RideCreate {
	rc.mutation.SetStartAddress(s)
	return rc
}

// SetNillableStartAddress sets the "start_address" field if the given value is not nil.
func (rc *RideCreate) SetNillableStartAddress(s *string) *RideCreate {
	if s != nil {
		rc.SetStartAddress(*s)
	}
	return rc
}

// SetEndAddress sets the "end_address" field.
func (rc *RideCreate) SetEndAddress(s string) *RideCreate {
	rc.mutation.SetEndAddress(s)
	return rc
}

// SetNillableEndAddress sets the "end_address" field if the given value is not nil.
func (rc *RideCreate) SetNillableEndAddress(s *string) *RideCreate {
	if s != nil {
		rc.SetEndAddress(*s)
	}
	return rc
}

// SetStartTime sets the "start_time" field.
func (rc *RideCreate) SetStartTime(t time.Time) *RideCreate {
	rc.mutation.SetStartTime(t)
	return rc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (rc *RideCreate) SetNillableStartTime(t *time.Time) *RideCreate {
	if t != nil {
		rc.SetStartTime(*t)
	}
	return rc
}

// SetEndTime sets the "end_time" field.
func (rc *RideCreate) SetEndTime(t time.Time) *RideCreate {
	rc.mutation.SetEndTime(t)
	return rc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (rc *RideCreate) SetNillableEndTime(t *time.Time) *RideCreate {
	if t != nil {
		rc.SetEndTime(*t)
	}
	return rc
}

// SetRevenue sets the "revenue" field.
func (rc *RideCreate) SetRevenue(f float64) *RideCreate {
	rc.mutation.SetRevenue(f)
	return rc
}

// SetNillableRevenue sets the "revenue" field if the given value is not nil.
func (rc *RideCreate) SetNillableRevenue(f *float64) *RideCreate {
	if f != nil {
		rc.SetRevenue(*f)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RideCreate) SetID(u uuid.UUID) *RideCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RideCreate) SetNillableID(u *uuid.UUID) *RideCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (rc *RideCreate) SetUserID(id uuid.UUID) *RideCreate {
	rc.mutation.SetUserID(id)
	return rc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (rc *RideCreate) SetNillableUserID(id *uuid.UUID) *RideCreate {
	if id != nil {
		rc = rc.SetUserID(*id)
	}
	return rc
}

// SetUser sets the "user" edge to the User entity.
func (rc *RideCreate) SetUser(u *User) *RideCreate {
	return rc.SetUserID(u.ID)
}

// SetVehicle sets the "vehicle" edge to the Vehicle entity.
func (rc *RideCreate) SetVehicle(v *Vehicle) *RideCreate {
	return rc.SetVehicleID(v.ID)
}

// AddVehicleLocationHistoryIDs adds the "vehicle_location_histories" edge to the VehicleLocationHistory entity by IDs.
func (rc *RideCreate) AddVehicleLocationHistoryIDs(ids ...uuid.UUID) *RideCreate {
	rc.mutation.AddVehicleLocationHistoryIDs(ids...)
	return rc
}

// AddVehicleLocationHistories adds the "vehicle_location_histories" edges to the VehicleLocationHistory entity.
func (rc *RideCreate) AddVehicleLocationHistories(v ...*VehicleLocationHistory) *RideCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return rc.AddVehicleLocationHistoryIDs(ids...)
}

// Mutation returns the RideMutation object of the builder.
func (rc *RideCreate) Mutation() *RideMutation {
	return rc.mutation
}

// Save creates the Ride in the database.
func (rc *RideCreate) Save(ctx context.Context) (*Ride, error) {
	rc.defaults()
	return withHooks[*Ride, RideMutation](ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RideCreate) SaveX(ctx context.Context) *Ride {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RideCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RideCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RideCreate) defaults() {
	if _, ok := rc.mutation.ID(); !ok {
		v := ride.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RideCreate) check() error {
	if _, ok := rc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Ride.city"`)}
	}
	return nil
}

func (rc *RideCreate) sqlSave(ctx context.Context) (*Ride, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RideCreate) createSpec() (*Ride, *sqlgraph.CreateSpec) {
	var (
		_node = &Ride{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ride.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ride.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.City(); ok {
		_spec.SetField(ride.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := rc.mutation.VehicleCity(); ok {
		_spec.SetField(ride.FieldVehicleCity, field.TypeString, value)
		_node.VehicleCity = value
	}
	if value, ok := rc.mutation.StartAddress(); ok {
		_spec.SetField(ride.FieldStartAddress, field.TypeString, value)
		_node.StartAddress = value
	}
	if value, ok := rc.mutation.EndAddress(); ok {
		_spec.SetField(ride.FieldEndAddress, field.TypeString, value)
		_node.EndAddress = value
	}
	if value, ok := rc.mutation.StartTime(); ok {
		_spec.SetField(ride.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := rc.mutation.EndTime(); ok {
		_spec.SetField(ride.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := rc.mutation.Revenue(); ok {
		_spec.SetField(ride.FieldRevenue, field.TypeFloat64, value)
		_node.Revenue = value
	}
	if nodes := rc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ride.UserTable,
			Columns: []string{ride.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.VehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ride.VehicleTable,
			Columns: []string{ride.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VehicleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.VehicleLocationHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ride.VehicleLocationHistoriesTable,
			Columns: []string{ride.VehicleLocationHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehiclelocationhistory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RideCreateBulk is the builder for creating many Ride entities in bulk.
type RideCreateBulk struct {
	config
	builders []*RideCreate
}

// Save creates the Ride entities in the database.
func (rcb *RideCreateBulk) Save(ctx context.Context) ([]*Ride, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Ride, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RideMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RideCreateBulk) SaveX(ctx context.Context) []*Ride {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RideCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RideCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
