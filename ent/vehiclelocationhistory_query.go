// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/predicate"
	"github.com/kofalt/example-ent-crdb/ent/ride"
	"github.com/kofalt/example-ent-crdb/ent/vehiclelocationhistory"
)

// VehicleLocationHistoryQuery is the builder for querying VehicleLocationHistory entities.
type VehicleLocationHistoryQuery struct {
	config
	ctx        *QueryContext
	order      []OrderFunc
	inters     []Interceptor
	predicates []predicate.VehicleLocationHistory
	withRides  *RideQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VehicleLocationHistoryQuery builder.
func (vlhq *VehicleLocationHistoryQuery) Where(ps ...predicate.VehicleLocationHistory) *VehicleLocationHistoryQuery {
	vlhq.predicates = append(vlhq.predicates, ps...)
	return vlhq
}

// Limit the number of records to be returned by this query.
func (vlhq *VehicleLocationHistoryQuery) Limit(limit int) *VehicleLocationHistoryQuery {
	vlhq.ctx.Limit = &limit
	return vlhq
}

// Offset to start from.
func (vlhq *VehicleLocationHistoryQuery) Offset(offset int) *VehicleLocationHistoryQuery {
	vlhq.ctx.Offset = &offset
	return vlhq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vlhq *VehicleLocationHistoryQuery) Unique(unique bool) *VehicleLocationHistoryQuery {
	vlhq.ctx.Unique = &unique
	return vlhq
}

// Order specifies how the records should be ordered.
func (vlhq *VehicleLocationHistoryQuery) Order(o ...OrderFunc) *VehicleLocationHistoryQuery {
	vlhq.order = append(vlhq.order, o...)
	return vlhq
}

// QueryRides chains the current query on the "rides" edge.
func (vlhq *VehicleLocationHistoryQuery) QueryRides() *RideQuery {
	query := (&RideClient{config: vlhq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vlhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vlhq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vehiclelocationhistory.Table, vehiclelocationhistory.FieldID, selector),
			sqlgraph.To(ride.Table, ride.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vehiclelocationhistory.RidesTable, vehiclelocationhistory.RidesColumn),
		)
		fromU = sqlgraph.SetNeighbors(vlhq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VehicleLocationHistory entity from the query.
// Returns a *NotFoundError when no VehicleLocationHistory was found.
func (vlhq *VehicleLocationHistoryQuery) First(ctx context.Context) (*VehicleLocationHistory, error) {
	nodes, err := vlhq.Limit(1).All(setContextOp(ctx, vlhq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{vehiclelocationhistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vlhq *VehicleLocationHistoryQuery) FirstX(ctx context.Context) *VehicleLocationHistory {
	node, err := vlhq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VehicleLocationHistory ID from the query.
// Returns a *NotFoundError when no VehicleLocationHistory ID was found.
func (vlhq *VehicleLocationHistoryQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = vlhq.Limit(1).IDs(setContextOp(ctx, vlhq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{vehiclelocationhistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vlhq *VehicleLocationHistoryQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := vlhq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VehicleLocationHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VehicleLocationHistory entity is found.
// Returns a *NotFoundError when no VehicleLocationHistory entities are found.
func (vlhq *VehicleLocationHistoryQuery) Only(ctx context.Context) (*VehicleLocationHistory, error) {
	nodes, err := vlhq.Limit(2).All(setContextOp(ctx, vlhq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{vehiclelocationhistory.Label}
	default:
		return nil, &NotSingularError{vehiclelocationhistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vlhq *VehicleLocationHistoryQuery) OnlyX(ctx context.Context) *VehicleLocationHistory {
	node, err := vlhq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VehicleLocationHistory ID in the query.
// Returns a *NotSingularError when more than one VehicleLocationHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (vlhq *VehicleLocationHistoryQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = vlhq.Limit(2).IDs(setContextOp(ctx, vlhq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{vehiclelocationhistory.Label}
	default:
		err = &NotSingularError{vehiclelocationhistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vlhq *VehicleLocationHistoryQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := vlhq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VehicleLocationHistories.
func (vlhq *VehicleLocationHistoryQuery) All(ctx context.Context) ([]*VehicleLocationHistory, error) {
	ctx = setContextOp(ctx, vlhq.ctx, "All")
	if err := vlhq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VehicleLocationHistory, *VehicleLocationHistoryQuery]()
	return withInterceptors[[]*VehicleLocationHistory](ctx, vlhq, qr, vlhq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vlhq *VehicleLocationHistoryQuery) AllX(ctx context.Context) []*VehicleLocationHistory {
	nodes, err := vlhq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VehicleLocationHistory IDs.
func (vlhq *VehicleLocationHistoryQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	ctx = setContextOp(ctx, vlhq.ctx, "IDs")
	if err := vlhq.Select(vehiclelocationhistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vlhq *VehicleLocationHistoryQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := vlhq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vlhq *VehicleLocationHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vlhq.ctx, "Count")
	if err := vlhq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vlhq, querierCount[*VehicleLocationHistoryQuery](), vlhq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vlhq *VehicleLocationHistoryQuery) CountX(ctx context.Context) int {
	count, err := vlhq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vlhq *VehicleLocationHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vlhq.ctx, "Exist")
	switch _, err := vlhq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vlhq *VehicleLocationHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := vlhq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VehicleLocationHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vlhq *VehicleLocationHistoryQuery) Clone() *VehicleLocationHistoryQuery {
	if vlhq == nil {
		return nil
	}
	return &VehicleLocationHistoryQuery{
		config:     vlhq.config,
		ctx:        vlhq.ctx.Clone(),
		order:      append([]OrderFunc{}, vlhq.order...),
		inters:     append([]Interceptor{}, vlhq.inters...),
		predicates: append([]predicate.VehicleLocationHistory{}, vlhq.predicates...),
		withRides:  vlhq.withRides.Clone(),
		// clone intermediate query.
		sql:  vlhq.sql.Clone(),
		path: vlhq.path,
	}
}

// WithRides tells the query-builder to eager-load the nodes that are connected to
// the "rides" edge. The optional arguments are used to configure the query builder of the edge.
func (vlhq *VehicleLocationHistoryQuery) WithRides(opts ...func(*RideQuery)) *VehicleLocationHistoryQuery {
	query := (&RideClient{config: vlhq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vlhq.withRides = query
	return vlhq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		City string `json:"city,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VehicleLocationHistory.Query().
//		GroupBy(vehiclelocationhistory.FieldCity).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vlhq *VehicleLocationHistoryQuery) GroupBy(field string, fields ...string) *VehicleLocationHistoryGroupBy {
	vlhq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VehicleLocationHistoryGroupBy{build: vlhq}
	grbuild.flds = &vlhq.ctx.Fields
	grbuild.label = vehiclelocationhistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		City string `json:"city,omitempty"`
//	}
//
//	client.VehicleLocationHistory.Query().
//		Select(vehiclelocationhistory.FieldCity).
//		Scan(ctx, &v)
func (vlhq *VehicleLocationHistoryQuery) Select(fields ...string) *VehicleLocationHistorySelect {
	vlhq.ctx.Fields = append(vlhq.ctx.Fields, fields...)
	sbuild := &VehicleLocationHistorySelect{VehicleLocationHistoryQuery: vlhq}
	sbuild.label = vehiclelocationhistory.Label
	sbuild.flds, sbuild.scan = &vlhq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VehicleLocationHistorySelect configured with the given aggregations.
func (vlhq *VehicleLocationHistoryQuery) Aggregate(fns ...AggregateFunc) *VehicleLocationHistorySelect {
	return vlhq.Select().Aggregate(fns...)
}

func (vlhq *VehicleLocationHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vlhq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vlhq); err != nil {
				return err
			}
		}
	}
	for _, f := range vlhq.ctx.Fields {
		if !vehiclelocationhistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vlhq.path != nil {
		prev, err := vlhq.path(ctx)
		if err != nil {
			return err
		}
		vlhq.sql = prev
	}
	return nil
}

func (vlhq *VehicleLocationHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VehicleLocationHistory, error) {
	var (
		nodes       = []*VehicleLocationHistory{}
		_spec       = vlhq.querySpec()
		loadedTypes = [1]bool{
			vlhq.withRides != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VehicleLocationHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VehicleLocationHistory{config: vlhq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vlhq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vlhq.withRides; query != nil {
		if err := vlhq.loadRides(ctx, query, nodes, nil,
			func(n *VehicleLocationHistory, e *Ride) { n.Edges.Rides = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vlhq *VehicleLocationHistoryQuery) loadRides(ctx context.Context, query *RideQuery, nodes []*VehicleLocationHistory, init func(*VehicleLocationHistory), assign func(*VehicleLocationHistory, *Ride)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*VehicleLocationHistory)
	for i := range nodes {
		fk := nodes[i].RideID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(ride.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ride_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (vlhq *VehicleLocationHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vlhq.querySpec()
	_spec.Node.Columns = vlhq.ctx.Fields
	if len(vlhq.ctx.Fields) > 0 {
		_spec.Unique = vlhq.ctx.Unique != nil && *vlhq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vlhq.driver, _spec)
}

func (vlhq *VehicleLocationHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehiclelocationhistory.Table,
			Columns: vehiclelocationhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vehiclelocationhistory.FieldID,
			},
		},
		From:   vlhq.sql,
		Unique: true,
	}
	if unique := vlhq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := vlhq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehiclelocationhistory.FieldID)
		for i := range fields {
			if fields[i] != vehiclelocationhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vlhq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vlhq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vlhq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vlhq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vlhq *VehicleLocationHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vlhq.driver.Dialect())
	t1 := builder.Table(vehiclelocationhistory.Table)
	columns := vlhq.ctx.Fields
	if len(columns) == 0 {
		columns = vehiclelocationhistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vlhq.sql != nil {
		selector = vlhq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vlhq.ctx.Unique != nil && *vlhq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range vlhq.predicates {
		p(selector)
	}
	for _, p := range vlhq.order {
		p(selector)
	}
	if offset := vlhq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vlhq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VehicleLocationHistoryGroupBy is the group-by builder for VehicleLocationHistory entities.
type VehicleLocationHistoryGroupBy struct {
	selector
	build *VehicleLocationHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vlhgb *VehicleLocationHistoryGroupBy) Aggregate(fns ...AggregateFunc) *VehicleLocationHistoryGroupBy {
	vlhgb.fns = append(vlhgb.fns, fns...)
	return vlhgb
}

// Scan applies the selector query and scans the result into the given value.
func (vlhgb *VehicleLocationHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vlhgb.build.ctx, "GroupBy")
	if err := vlhgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VehicleLocationHistoryQuery, *VehicleLocationHistoryGroupBy](ctx, vlhgb.build, vlhgb, vlhgb.build.inters, v)
}

func (vlhgb *VehicleLocationHistoryGroupBy) sqlScan(ctx context.Context, root *VehicleLocationHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vlhgb.fns))
	for _, fn := range vlhgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vlhgb.flds)+len(vlhgb.fns))
		for _, f := range *vlhgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vlhgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vlhgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VehicleLocationHistorySelect is the builder for selecting fields of VehicleLocationHistory entities.
type VehicleLocationHistorySelect struct {
	*VehicleLocationHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vlhs *VehicleLocationHistorySelect) Aggregate(fns ...AggregateFunc) *VehicleLocationHistorySelect {
	vlhs.fns = append(vlhs.fns, fns...)
	return vlhs
}

// Scan applies the selector query and scans the result into the given value.
func (vlhs *VehicleLocationHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vlhs.ctx, "Select")
	if err := vlhs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VehicleLocationHistoryQuery, *VehicleLocationHistorySelect](ctx, vlhs.VehicleLocationHistoryQuery, vlhs, vlhs.inters, v)
}

func (vlhs *VehicleLocationHistorySelect) sqlScan(ctx context.Context, root *VehicleLocationHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vlhs.fns))
	for _, fn := range vlhs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vlhs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vlhs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
