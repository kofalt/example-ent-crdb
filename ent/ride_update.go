// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/predicate"
	"github.com/kofalt/example-ent-crdb/ent/ride"
	"github.com/kofalt/example-ent-crdb/ent/user"
	"github.com/kofalt/example-ent-crdb/ent/vehicle"
	"github.com/kofalt/example-ent-crdb/ent/vehiclelocationhistory"
)

// RideUpdate is the builder for updating Ride entities.
type RideUpdate struct {
	config
	hooks    []Hook
	mutation *RideMutation
}

// Where appends a list predicates to the RideUpdate builder.
func (ru *RideUpdate) Where(ps ...predicate.Ride) *RideUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetCity sets the "city" field.
func (ru *RideUpdate) SetCity(s string) *RideUpdate {
	ru.mutation.SetCity(s)
	return ru
}

// SetVehicleCity sets the "vehicle_city" field.
func (ru *RideUpdate) SetVehicleCity(s string) *RideUpdate {
	ru.mutation.SetVehicleCity(s)
	return ru
}

// SetNillableVehicleCity sets the "vehicle_city" field if the given value is not nil.
func (ru *RideUpdate) SetNillableVehicleCity(s *string) *RideUpdate {
	if s != nil {
		ru.SetVehicleCity(*s)
	}
	return ru
}

// ClearVehicleCity clears the value of the "vehicle_city" field.
func (ru *RideUpdate) ClearVehicleCity() *RideUpdate {
	ru.mutation.ClearVehicleCity()
	return ru
}

// SetRiderID sets the "rider_id" field.
func (ru *RideUpdate) SetRiderID(u uuid.UUID) *RideUpdate {
	ru.mutation.SetRiderID(u)
	return ru
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (ru *RideUpdate) SetNillableRiderID(u *uuid.UUID) *RideUpdate {
	if u != nil {
		ru.SetRiderID(*u)
	}
	return ru
}

// ClearRiderID clears the value of the "rider_id" field.
func (ru *RideUpdate) ClearRiderID() *RideUpdate {
	ru.mutation.ClearRiderID()
	return ru
}

// SetVehicleID sets the "vehicle_id" field.
func (ru *RideUpdate) SetVehicleID(u uuid.UUID) *RideUpdate {
	ru.mutation.SetVehicleID(u)
	return ru
}

// SetNillableVehicleID sets the "vehicle_id" field if the given value is not nil.
func (ru *RideUpdate) SetNillableVehicleID(u *uuid.UUID) *RideUpdate {
	if u != nil {
		ru.SetVehicleID(*u)
	}
	return ru
}

// ClearVehicleID clears the value of the "vehicle_id" field.
func (ru *RideUpdate) ClearVehicleID() *RideUpdate {
	ru.mutation.ClearVehicleID()
	return ru
}

// SetStartAddress sets the "start_address" field.
func (ru *RideUpdate) SetStartAddress(s string) *RideUpdate {
	ru.mutation.SetStartAddress(s)
	return ru
}

// SetNillableStartAddress sets the "start_address" field if the given value is not nil.
func (ru *RideUpdate) SetNillableStartAddress(s *string) *RideUpdate {
	if s != nil {
		ru.SetStartAddress(*s)
	}
	return ru
}

// ClearStartAddress clears the value of the "start_address" field.
func (ru *RideUpdate) ClearStartAddress() *RideUpdate {
	ru.mutation.ClearStartAddress()
	return ru
}

// SetEndAddress sets the "end_address" field.
func (ru *RideUpdate) SetEndAddress(s string) *RideUpdate {
	ru.mutation.SetEndAddress(s)
	return ru
}

// SetNillableEndAddress sets the "end_address" field if the given value is not nil.
func (ru *RideUpdate) SetNillableEndAddress(s *string) *RideUpdate {
	if s != nil {
		ru.SetEndAddress(*s)
	}
	return ru
}

// ClearEndAddress clears the value of the "end_address" field.
func (ru *RideUpdate) ClearEndAddress() *RideUpdate {
	ru.mutation.ClearEndAddress()
	return ru
}

// SetStartTime sets the "start_time" field.
func (ru *RideUpdate) SetStartTime(t time.Time) *RideUpdate {
	ru.mutation.SetStartTime(t)
	return ru
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (ru *RideUpdate) SetNillableStartTime(t *time.Time) *RideUpdate {
	if t != nil {
		ru.SetStartTime(*t)
	}
	return ru
}

// ClearStartTime clears the value of the "start_time" field.
func (ru *RideUpdate) ClearStartTime() *RideUpdate {
	ru.mutation.ClearStartTime()
	return ru
}

// SetEndTime sets the "end_time" field.
func (ru *RideUpdate) SetEndTime(t time.Time) *RideUpdate {
	ru.mutation.SetEndTime(t)
	return ru
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ru *RideUpdate) SetNillableEndTime(t *time.Time) *RideUpdate {
	if t != nil {
		ru.SetEndTime(*t)
	}
	return ru
}

// ClearEndTime clears the value of the "end_time" field.
func (ru *RideUpdate) ClearEndTime() *RideUpdate {
	ru.mutation.ClearEndTime()
	return ru
}

// SetRevenue sets the "revenue" field.
func (ru *RideUpdate) SetRevenue(f float64) *RideUpdate {
	ru.mutation.ResetRevenue()
	ru.mutation.SetRevenue(f)
	return ru
}

// SetNillableRevenue sets the "revenue" field if the given value is not nil.
func (ru *RideUpdate) SetNillableRevenue(f *float64) *RideUpdate {
	if f != nil {
		ru.SetRevenue(*f)
	}
	return ru
}

// AddRevenue adds f to the "revenue" field.
func (ru *RideUpdate) AddRevenue(f float64) *RideUpdate {
	ru.mutation.AddRevenue(f)
	return ru
}

// ClearRevenue clears the value of the "revenue" field.
func (ru *RideUpdate) ClearRevenue() *RideUpdate {
	ru.mutation.ClearRevenue()
	return ru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ru *RideUpdate) SetUserID(id uuid.UUID) *RideUpdate {
	ru.mutation.SetUserID(id)
	return ru
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ru *RideUpdate) SetNillableUserID(id *uuid.UUID) *RideUpdate {
	if id != nil {
		ru = ru.SetUserID(*id)
	}
	return ru
}

// SetUser sets the "user" edge to the User entity.
func (ru *RideUpdate) SetUser(u *User) *RideUpdate {
	return ru.SetUserID(u.ID)
}

// SetVehicle sets the "vehicle" edge to the Vehicle entity.
func (ru *RideUpdate) SetVehicle(v *Vehicle) *RideUpdate {
	return ru.SetVehicleID(v.ID)
}

// AddVehicleLocationHistoryIDs adds the "vehicle_location_histories" edge to the VehicleLocationHistory entity by IDs.
func (ru *RideUpdate) AddVehicleLocationHistoryIDs(ids ...uuid.UUID) *RideUpdate {
	ru.mutation.AddVehicleLocationHistoryIDs(ids...)
	return ru
}

// AddVehicleLocationHistories adds the "vehicle_location_histories" edges to the VehicleLocationHistory entity.
func (ru *RideUpdate) AddVehicleLocationHistories(v ...*VehicleLocationHistory) *RideUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ru.AddVehicleLocationHistoryIDs(ids...)
}

// Mutation returns the RideMutation object of the builder.
func (ru *RideUpdate) Mutation() *RideMutation {
	return ru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ru *RideUpdate) ClearUser() *RideUpdate {
	ru.mutation.ClearUser()
	return ru
}

// ClearVehicle clears the "vehicle" edge to the Vehicle entity.
func (ru *RideUpdate) ClearVehicle() *RideUpdate {
	ru.mutation.ClearVehicle()
	return ru
}

// ClearVehicleLocationHistories clears all "vehicle_location_histories" edges to the VehicleLocationHistory entity.
func (ru *RideUpdate) ClearVehicleLocationHistories() *RideUpdate {
	ru.mutation.ClearVehicleLocationHistories()
	return ru
}

// RemoveVehicleLocationHistoryIDs removes the "vehicle_location_histories" edge to VehicleLocationHistory entities by IDs.
func (ru *RideUpdate) RemoveVehicleLocationHistoryIDs(ids ...uuid.UUID) *RideUpdate {
	ru.mutation.RemoveVehicleLocationHistoryIDs(ids...)
	return ru
}

// RemoveVehicleLocationHistories removes "vehicle_location_histories" edges to VehicleLocationHistory entities.
func (ru *RideUpdate) RemoveVehicleLocationHistories(v ...*VehicleLocationHistory) *RideUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ru.RemoveVehicleLocationHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RideUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RideMutation](ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RideUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RideUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RideUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RideUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ride.Table,
			Columns: ride.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ride.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.City(); ok {
		_spec.SetField(ride.FieldCity, field.TypeString, value)
	}
	if value, ok := ru.mutation.VehicleCity(); ok {
		_spec.SetField(ride.FieldVehicleCity, field.TypeString, value)
	}
	if ru.mutation.VehicleCityCleared() {
		_spec.ClearField(ride.FieldVehicleCity, field.TypeString)
	}
	if value, ok := ru.mutation.StartAddress(); ok {
		_spec.SetField(ride.FieldStartAddress, field.TypeString, value)
	}
	if ru.mutation.StartAddressCleared() {
		_spec.ClearField(ride.FieldStartAddress, field.TypeString)
	}
	if value, ok := ru.mutation.EndAddress(); ok {
		_spec.SetField(ride.FieldEndAddress, field.TypeString, value)
	}
	if ru.mutation.EndAddressCleared() {
		_spec.ClearField(ride.FieldEndAddress, field.TypeString)
	}
	if value, ok := ru.mutation.StartTime(); ok {
		_spec.SetField(ride.FieldStartTime, field.TypeTime, value)
	}
	if ru.mutation.StartTimeCleared() {
		_spec.ClearField(ride.FieldStartTime, field.TypeTime)
	}
	if value, ok := ru.mutation.EndTime(); ok {
		_spec.SetField(ride.FieldEndTime, field.TypeTime, value)
	}
	if ru.mutation.EndTimeCleared() {
		_spec.ClearField(ride.FieldEndTime, field.TypeTime)
	}
	if value, ok := ru.mutation.Revenue(); ok {
		_spec.SetField(ride.FieldRevenue, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedRevenue(); ok {
		_spec.AddField(ride.FieldRevenue, field.TypeFloat64, value)
	}
	if ru.mutation.RevenueCleared() {
		_spec.ClearField(ride.FieldRevenue, field.TypeFloat64)
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ride.UserTable,
			Columns: []string{ride.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ride.UserTable,
			Columns: []string{ride.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.VehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ride.VehicleTable,
			Columns: []string{ride.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.VehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ride.VehicleTable,
			Columns: []string{ride.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.VehicleLocationHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ride.VehicleLocationHistoriesTable,
			Columns: []string{ride.VehicleLocationHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehiclelocationhistory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedVehicleLocationHistoriesIDs(); len(nodes) > 0 && !ru.mutation.VehicleLocationHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ride.VehicleLocationHistoriesTable,
			Columns: []string{ride.VehicleLocationHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehiclelocationhistory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.VehicleLocationHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ride.VehicleLocationHistoriesTable,
			Columns: []string{ride.VehicleLocationHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehiclelocationhistory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ride.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RideUpdateOne is the builder for updating a single Ride entity.
type RideUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RideMutation
}

// SetCity sets the "city" field.
func (ruo *RideUpdateOne) SetCity(s string) *RideUpdateOne {
	ruo.mutation.SetCity(s)
	return ruo
}

// SetVehicleCity sets the "vehicle_city" field.
func (ruo *RideUpdateOne) SetVehicleCity(s string) *RideUpdateOne {
	ruo.mutation.SetVehicleCity(s)
	return ruo
}

// SetNillableVehicleCity sets the "vehicle_city" field if the given value is not nil.
func (ruo *RideUpdateOne) SetNillableVehicleCity(s *string) *RideUpdateOne {
	if s != nil {
		ruo.SetVehicleCity(*s)
	}
	return ruo
}

// ClearVehicleCity clears the value of the "vehicle_city" field.
func (ruo *RideUpdateOne) ClearVehicleCity() *RideUpdateOne {
	ruo.mutation.ClearVehicleCity()
	return ruo
}

// SetRiderID sets the "rider_id" field.
func (ruo *RideUpdateOne) SetRiderID(u uuid.UUID) *RideUpdateOne {
	ruo.mutation.SetRiderID(u)
	return ruo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (ruo *RideUpdateOne) SetNillableRiderID(u *uuid.UUID) *RideUpdateOne {
	if u != nil {
		ruo.SetRiderID(*u)
	}
	return ruo
}

// ClearRiderID clears the value of the "rider_id" field.
func (ruo *RideUpdateOne) ClearRiderID() *RideUpdateOne {
	ruo.mutation.ClearRiderID()
	return ruo
}

// SetVehicleID sets the "vehicle_id" field.
func (ruo *RideUpdateOne) SetVehicleID(u uuid.UUID) *RideUpdateOne {
	ruo.mutation.SetVehicleID(u)
	return ruo
}

// SetNillableVehicleID sets the "vehicle_id" field if the given value is not nil.
func (ruo *RideUpdateOne) SetNillableVehicleID(u *uuid.UUID) *RideUpdateOne {
	if u != nil {
		ruo.SetVehicleID(*u)
	}
	return ruo
}

// ClearVehicleID clears the value of the "vehicle_id" field.
func (ruo *RideUpdateOne) ClearVehicleID() *RideUpdateOne {
	ruo.mutation.ClearVehicleID()
	return ruo
}

// SetStartAddress sets the "start_address" field.
func (ruo *RideUpdateOne) SetStartAddress(s string) *RideUpdateOne {
	ruo.mutation.SetStartAddress(s)
	return ruo
}

// SetNillableStartAddress sets the "start_address" field if the given value is not nil.
func (ruo *RideUpdateOne) SetNillableStartAddress(s *string) *RideUpdateOne {
	if s != nil {
		ruo.SetStartAddress(*s)
	}
	return ruo
}

// ClearStartAddress clears the value of the "start_address" field.
func (ruo *RideUpdateOne) ClearStartAddress() *RideUpdateOne {
	ruo.mutation.ClearStartAddress()
	return ruo
}

// SetEndAddress sets the "end_address" field.
func (ruo *RideUpdateOne) SetEndAddress(s string) *RideUpdateOne {
	ruo.mutation.SetEndAddress(s)
	return ruo
}

// SetNillableEndAddress sets the "end_address" field if the given value is not nil.
func (ruo *RideUpdateOne) SetNillableEndAddress(s *string) *RideUpdateOne {
	if s != nil {
		ruo.SetEndAddress(*s)
	}
	return ruo
}

// ClearEndAddress clears the value of the "end_address" field.
func (ruo *RideUpdateOne) ClearEndAddress() *RideUpdateOne {
	ruo.mutation.ClearEndAddress()
	return ruo
}

// SetStartTime sets the "start_time" field.
func (ruo *RideUpdateOne) SetStartTime(t time.Time) *RideUpdateOne {
	ruo.mutation.SetStartTime(t)
	return ruo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (ruo *RideUpdateOne) SetNillableStartTime(t *time.Time) *RideUpdateOne {
	if t != nil {
		ruo.SetStartTime(*t)
	}
	return ruo
}

// ClearStartTime clears the value of the "start_time" field.
func (ruo *RideUpdateOne) ClearStartTime() *RideUpdateOne {
	ruo.mutation.ClearStartTime()
	return ruo
}

// SetEndTime sets the "end_time" field.
func (ruo *RideUpdateOne) SetEndTime(t time.Time) *RideUpdateOne {
	ruo.mutation.SetEndTime(t)
	return ruo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ruo *RideUpdateOne) SetNillableEndTime(t *time.Time) *RideUpdateOne {
	if t != nil {
		ruo.SetEndTime(*t)
	}
	return ruo
}

// ClearEndTime clears the value of the "end_time" field.
func (ruo *RideUpdateOne) ClearEndTime() *RideUpdateOne {
	ruo.mutation.ClearEndTime()
	return ruo
}

// SetRevenue sets the "revenue" field.
func (ruo *RideUpdateOne) SetRevenue(f float64) *RideUpdateOne {
	ruo.mutation.ResetRevenue()
	ruo.mutation.SetRevenue(f)
	return ruo
}

// SetNillableRevenue sets the "revenue" field if the given value is not nil.
func (ruo *RideUpdateOne) SetNillableRevenue(f *float64) *RideUpdateOne {
	if f != nil {
		ruo.SetRevenue(*f)
	}
	return ruo
}

// AddRevenue adds f to the "revenue" field.
func (ruo *RideUpdateOne) AddRevenue(f float64) *RideUpdateOne {
	ruo.mutation.AddRevenue(f)
	return ruo
}

// ClearRevenue clears the value of the "revenue" field.
func (ruo *RideUpdateOne) ClearRevenue() *RideUpdateOne {
	ruo.mutation.ClearRevenue()
	return ruo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ruo *RideUpdateOne) SetUserID(id uuid.UUID) *RideUpdateOne {
	ruo.mutation.SetUserID(id)
	return ruo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ruo *RideUpdateOne) SetNillableUserID(id *uuid.UUID) *RideUpdateOne {
	if id != nil {
		ruo = ruo.SetUserID(*id)
	}
	return ruo
}

// SetUser sets the "user" edge to the User entity.
func (ruo *RideUpdateOne) SetUser(u *User) *RideUpdateOne {
	return ruo.SetUserID(u.ID)
}

// SetVehicle sets the "vehicle" edge to the Vehicle entity.
func (ruo *RideUpdateOne) SetVehicle(v *Vehicle) *RideUpdateOne {
	return ruo.SetVehicleID(v.ID)
}

// AddVehicleLocationHistoryIDs adds the "vehicle_location_histories" edge to the VehicleLocationHistory entity by IDs.
func (ruo *RideUpdateOne) AddVehicleLocationHistoryIDs(ids ...uuid.UUID) *RideUpdateOne {
	ruo.mutation.AddVehicleLocationHistoryIDs(ids...)
	return ruo
}

// AddVehicleLocationHistories adds the "vehicle_location_histories" edges to the VehicleLocationHistory entity.
func (ruo *RideUpdateOne) AddVehicleLocationHistories(v ...*VehicleLocationHistory) *RideUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ruo.AddVehicleLocationHistoryIDs(ids...)
}

// Mutation returns the RideMutation object of the builder.
func (ruo *RideUpdateOne) Mutation() *RideMutation {
	return ruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ruo *RideUpdateOne) ClearUser() *RideUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// ClearVehicle clears the "vehicle" edge to the Vehicle entity.
func (ruo *RideUpdateOne) ClearVehicle() *RideUpdateOne {
	ruo.mutation.ClearVehicle()
	return ruo
}

// ClearVehicleLocationHistories clears all "vehicle_location_histories" edges to the VehicleLocationHistory entity.
func (ruo *RideUpdateOne) ClearVehicleLocationHistories() *RideUpdateOne {
	ruo.mutation.ClearVehicleLocationHistories()
	return ruo
}

// RemoveVehicleLocationHistoryIDs removes the "vehicle_location_histories" edge to VehicleLocationHistory entities by IDs.
func (ruo *RideUpdateOne) RemoveVehicleLocationHistoryIDs(ids ...uuid.UUID) *RideUpdateOne {
	ruo.mutation.RemoveVehicleLocationHistoryIDs(ids...)
	return ruo
}

// RemoveVehicleLocationHistories removes "vehicle_location_histories" edges to VehicleLocationHistory entities.
func (ruo *RideUpdateOne) RemoveVehicleLocationHistories(v ...*VehicleLocationHistory) *RideUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ruo.RemoveVehicleLocationHistoryIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RideUpdateOne) Select(field string, fields ...string) *RideUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Ride entity.
func (ruo *RideUpdateOne) Save(ctx context.Context) (*Ride, error) {
	return withHooks[*Ride, RideMutation](ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RideUpdateOne) SaveX(ctx context.Context) *Ride {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RideUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RideUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RideUpdateOne) sqlSave(ctx context.Context) (_node *Ride, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ride.Table,
			Columns: ride.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ride.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ride.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ride.FieldID)
		for _, f := range fields {
			if !ride.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ride.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.City(); ok {
		_spec.SetField(ride.FieldCity, field.TypeString, value)
	}
	if value, ok := ruo.mutation.VehicleCity(); ok {
		_spec.SetField(ride.FieldVehicleCity, field.TypeString, value)
	}
	if ruo.mutation.VehicleCityCleared() {
		_spec.ClearField(ride.FieldVehicleCity, field.TypeString)
	}
	if value, ok := ruo.mutation.StartAddress(); ok {
		_spec.SetField(ride.FieldStartAddress, field.TypeString, value)
	}
	if ruo.mutation.StartAddressCleared() {
		_spec.ClearField(ride.FieldStartAddress, field.TypeString)
	}
	if value, ok := ruo.mutation.EndAddress(); ok {
		_spec.SetField(ride.FieldEndAddress, field.TypeString, value)
	}
	if ruo.mutation.EndAddressCleared() {
		_spec.ClearField(ride.FieldEndAddress, field.TypeString)
	}
	if value, ok := ruo.mutation.StartTime(); ok {
		_spec.SetField(ride.FieldStartTime, field.TypeTime, value)
	}
	if ruo.mutation.StartTimeCleared() {
		_spec.ClearField(ride.FieldStartTime, field.TypeTime)
	}
	if value, ok := ruo.mutation.EndTime(); ok {
		_spec.SetField(ride.FieldEndTime, field.TypeTime, value)
	}
	if ruo.mutation.EndTimeCleared() {
		_spec.ClearField(ride.FieldEndTime, field.TypeTime)
	}
	if value, ok := ruo.mutation.Revenue(); ok {
		_spec.SetField(ride.FieldRevenue, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedRevenue(); ok {
		_spec.AddField(ride.FieldRevenue, field.TypeFloat64, value)
	}
	if ruo.mutation.RevenueCleared() {
		_spec.ClearField(ride.FieldRevenue, field.TypeFloat64)
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ride.UserTable,
			Columns: []string{ride.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ride.UserTable,
			Columns: []string{ride.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.VehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ride.VehicleTable,
			Columns: []string{ride.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.VehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ride.VehicleTable,
			Columns: []string{ride.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.VehicleLocationHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ride.VehicleLocationHistoriesTable,
			Columns: []string{ride.VehicleLocationHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehiclelocationhistory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedVehicleLocationHistoriesIDs(); len(nodes) > 0 && !ruo.mutation.VehicleLocationHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ride.VehicleLocationHistoriesTable,
			Columns: []string{ride.VehicleLocationHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehiclelocationhistory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.VehicleLocationHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ride.VehicleLocationHistoriesTable,
			Columns: []string{ride.VehicleLocationHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehiclelocationhistory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ride{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ride.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
