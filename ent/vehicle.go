// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/user"
	"github.com/kofalt/example-ent-crdb/ent/vehicle"
)

// Vehicle is the model entity for the Vehicle schema.
type Vehicle struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID uuid.UUID `json:"owner_id,omitempty"`
	// CreationTime holds the value of the "creation_time" field.
	CreationTime time.Time `json:"creation_time,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CurrentLocation holds the value of the "current_location" field.
	CurrentLocation string `json:"current_location,omitempty"`
	// Ext holds the value of the "ext" field.
	Ext *map[string]interface{} `json:"ext,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VehicleQuery when eager-loading is set.
	Edges VehicleEdges `json:"edges"`
}

// VehicleEdges holds the relations/edges for other nodes in the graph.
type VehicleEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Rides holds the value of the rides edge.
	Rides []*Ride `json:"rides,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VehicleEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RidesOrErr returns the Rides value or an error if the edge
// was not loaded in eager-loading.
func (e VehicleEdges) RidesOrErr() ([]*Ride, error) {
	if e.loadedTypes[1] {
		return e.Rides, nil
	}
	return nil, &NotLoadedError{edge: "rides"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vehicle) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vehicle.FieldExt:
			values[i] = new([]byte)
		case vehicle.FieldCity, vehicle.FieldType, vehicle.FieldStatus, vehicle.FieldCurrentLocation:
			values[i] = new(sql.NullString)
		case vehicle.FieldCreationTime:
			values[i] = new(sql.NullTime)
		case vehicle.FieldID, vehicle.FieldOwnerID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Vehicle", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vehicle fields.
func (v *Vehicle) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vehicle.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				v.ID = *value
			}
		case vehicle.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				v.City = value.String
			}
		case vehicle.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				v.Type = value.String
			}
		case vehicle.FieldOwnerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value != nil {
				v.OwnerID = *value
			}
		case vehicle.FieldCreationTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field creation_time", values[i])
			} else if value.Valid {
				v.CreationTime = value.Time
			}
		case vehicle.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				v.Status = value.String
			}
		case vehicle.FieldCurrentLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_location", values[i])
			} else if value.Valid {
				v.CurrentLocation = value.String
			}
		case vehicle.FieldExt:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ext", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &v.Ext); err != nil {
					return fmt.Errorf("unmarshal field ext: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Vehicle entity.
func (v *Vehicle) QueryUser() *UserQuery {
	return NewVehicleClient(v.config).QueryUser(v)
}

// QueryRides queries the "rides" edge of the Vehicle entity.
func (v *Vehicle) QueryRides() *RideQuery {
	return NewVehicleClient(v.config).QueryRides(v)
}

// Update returns a builder for updating this Vehicle.
// Note that you need to call Vehicle.Unwrap() before calling this method if this Vehicle
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vehicle) Update() *VehicleUpdateOne {
	return NewVehicleClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Vehicle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vehicle) Unwrap() *Vehicle {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vehicle is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vehicle) String() string {
	var builder strings.Builder
	builder.WriteString("Vehicle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("city=")
	builder.WriteString(v.City)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(v.Type)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(fmt.Sprintf("%v", v.OwnerID))
	builder.WriteString(", ")
	builder.WriteString("creation_time=")
	builder.WriteString(v.CreationTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(v.Status)
	builder.WriteString(", ")
	builder.WriteString("current_location=")
	builder.WriteString(v.CurrentLocation)
	builder.WriteString(", ")
	builder.WriteString("ext=")
	builder.WriteString(fmt.Sprintf("%v", v.Ext))
	builder.WriteByte(')')
	return builder.String()
}

// Vehicles is a parsable slice of Vehicle.
type Vehicles []*Vehicle

func (v Vehicles) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
