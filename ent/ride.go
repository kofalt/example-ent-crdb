// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/ride"
	"github.com/kofalt/example-ent-crdb/ent/user"
	"github.com/kofalt/example-ent-crdb/ent/vehicle"
)

// Ride is the model entity for the Ride schema.
type Ride struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// VehicleCity holds the value of the "vehicle_city" field.
	VehicleCity string `json:"vehicle_city,omitempty"`
	// RiderID holds the value of the "rider_id" field.
	RiderID uuid.UUID `json:"rider_id,omitempty"`
	// VehicleID holds the value of the "vehicle_id" field.
	VehicleID uuid.UUID `json:"vehicle_id,omitempty"`
	// StartAddress holds the value of the "start_address" field.
	StartAddress string `json:"start_address,omitempty"`
	// EndAddress holds the value of the "end_address" field.
	EndAddress string `json:"end_address,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Revenue holds the value of the "revenue" field.
	Revenue float64 `json:"revenue,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RideQuery when eager-loading is set.
	Edges RideEdges `json:"edges"`
}

// RideEdges holds the relations/edges for other nodes in the graph.
type RideEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Vehicle holds the value of the vehicle edge.
	Vehicle *Vehicle `json:"vehicle,omitempty"`
	// VehicleLocationHistories holds the value of the vehicle_location_histories edge.
	VehicleLocationHistories []*VehicleLocationHistory `json:"vehicle_location_histories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RideEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// VehicleOrErr returns the Vehicle value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RideEdges) VehicleOrErr() (*Vehicle, error) {
	if e.loadedTypes[1] {
		if e.Vehicle == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: vehicle.Label}
		}
		return e.Vehicle, nil
	}
	return nil, &NotLoadedError{edge: "vehicle"}
}

// VehicleLocationHistoriesOrErr returns the VehicleLocationHistories value or an error if the edge
// was not loaded in eager-loading.
func (e RideEdges) VehicleLocationHistoriesOrErr() ([]*VehicleLocationHistory, error) {
	if e.loadedTypes[2] {
		return e.VehicleLocationHistories, nil
	}
	return nil, &NotLoadedError{edge: "vehicle_location_histories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ride) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ride.FieldRevenue:
			values[i] = new(sql.NullFloat64)
		case ride.FieldCity, ride.FieldVehicleCity, ride.FieldStartAddress, ride.FieldEndAddress:
			values[i] = new(sql.NullString)
		case ride.FieldStartTime, ride.FieldEndTime:
			values[i] = new(sql.NullTime)
		case ride.FieldID, ride.FieldRiderID, ride.FieldVehicleID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Ride", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ride fields.
func (r *Ride) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ride.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case ride.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				r.City = value.String
			}
		case ride.FieldVehicleCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vehicle_city", values[i])
			} else if value.Valid {
				r.VehicleCity = value.String
			}
		case ride.FieldRiderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value != nil {
				r.RiderID = *value
			}
		case ride.FieldVehicleID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field vehicle_id", values[i])
			} else if value != nil {
				r.VehicleID = *value
			}
		case ride.FieldStartAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_address", values[i])
			} else if value.Valid {
				r.StartAddress = value.String
			}
		case ride.FieldEndAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field end_address", values[i])
			} else if value.Valid {
				r.EndAddress = value.String
			}
		case ride.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				r.StartTime = value.Time
			}
		case ride.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				r.EndTime = value.Time
			}
		case ride.FieldRevenue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field revenue", values[i])
			} else if value.Valid {
				r.Revenue = value.Float64
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Ride entity.
func (r *Ride) QueryUser() *UserQuery {
	return NewRideClient(r.config).QueryUser(r)
}

// QueryVehicle queries the "vehicle" edge of the Ride entity.
func (r *Ride) QueryVehicle() *VehicleQuery {
	return NewRideClient(r.config).QueryVehicle(r)
}

// QueryVehicleLocationHistories queries the "vehicle_location_histories" edge of the Ride entity.
func (r *Ride) QueryVehicleLocationHistories() *VehicleLocationHistoryQuery {
	return NewRideClient(r.config).QueryVehicleLocationHistories(r)
}

// Update returns a builder for updating this Ride.
// Note that you need to call Ride.Unwrap() before calling this method if this Ride
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Ride) Update() *RideUpdateOne {
	return NewRideClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Ride entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Ride) Unwrap() *Ride {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ride is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Ride) String() string {
	var builder strings.Builder
	builder.WriteString("Ride(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("city=")
	builder.WriteString(r.City)
	builder.WriteString(", ")
	builder.WriteString("vehicle_city=")
	builder.WriteString(r.VehicleCity)
	builder.WriteString(", ")
	builder.WriteString("rider_id=")
	builder.WriteString(fmt.Sprintf("%v", r.RiderID))
	builder.WriteString(", ")
	builder.WriteString("vehicle_id=")
	builder.WriteString(fmt.Sprintf("%v", r.VehicleID))
	builder.WriteString(", ")
	builder.WriteString("start_address=")
	builder.WriteString(r.StartAddress)
	builder.WriteString(", ")
	builder.WriteString("end_address=")
	builder.WriteString(r.EndAddress)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(r.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(r.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("revenue=")
	builder.WriteString(fmt.Sprintf("%v", r.Revenue))
	builder.WriteByte(')')
	return builder.String()
}

// Rides is a parsable slice of Ride.
type Rides []*Ride

func (r Rides) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
