// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/ride"
	"github.com/kofalt/example-ent-crdb/ent/user"
	"github.com/kofalt/example-ent-crdb/ent/vehicle"
)

// VehicleCreate is the builder for creating a Vehicle entity.
type VehicleCreate struct {
	config
	mutation *VehicleMutation
	hooks    []Hook
}

// SetCity sets the "city" field.
func (vc *VehicleCreate) SetCity(s string) *VehicleCreate {
	vc.mutation.SetCity(s)
	return vc
}

// SetType sets the "type" field.
func (vc *VehicleCreate) SetType(s string) *VehicleCreate {
	vc.mutation.SetType(s)
	return vc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableType(s *string) *VehicleCreate {
	if s != nil {
		vc.SetType(*s)
	}
	return vc
}

// SetOwnerID sets the "owner_id" field.
func (vc *VehicleCreate) SetOwnerID(u uuid.UUID) *VehicleCreate {
	vc.mutation.SetOwnerID(u)
	return vc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableOwnerID(u *uuid.UUID) *VehicleCreate {
	if u != nil {
		vc.SetOwnerID(*u)
	}
	return vc
}

// SetCreationTime sets the "creation_time" field.
func (vc *VehicleCreate) SetCreationTime(t time.Time) *VehicleCreate {
	vc.mutation.SetCreationTime(t)
	return vc
}

// SetNillableCreationTime sets the "creation_time" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableCreationTime(t *time.Time) *VehicleCreate {
	if t != nil {
		vc.SetCreationTime(*t)
	}
	return vc
}

// SetStatus sets the "status" field.
func (vc *VehicleCreate) SetStatus(s string) *VehicleCreate {
	vc.mutation.SetStatus(s)
	return vc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableStatus(s *string) *VehicleCreate {
	if s != nil {
		vc.SetStatus(*s)
	}
	return vc
}

// SetCurrentLocation sets the "current_location" field.
func (vc *VehicleCreate) SetCurrentLocation(s string) *VehicleCreate {
	vc.mutation.SetCurrentLocation(s)
	return vc
}

// SetNillableCurrentLocation sets the "current_location" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableCurrentLocation(s *string) *VehicleCreate {
	if s != nil {
		vc.SetCurrentLocation(*s)
	}
	return vc
}

// SetExt sets the "ext" field.
func (vc *VehicleCreate) SetExt(m *map[string]interface{}) *VehicleCreate {
	vc.mutation.SetExt(m)
	return vc
}

// SetID sets the "id" field.
func (vc *VehicleCreate) SetID(u uuid.UUID) *VehicleCreate {
	vc.mutation.SetID(u)
	return vc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableID(u *uuid.UUID) *VehicleCreate {
	if u != nil {
		vc.SetID(*u)
	}
	return vc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vc *VehicleCreate) SetUserID(id uuid.UUID) *VehicleCreate {
	vc.mutation.SetUserID(id)
	return vc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (vc *VehicleCreate) SetNillableUserID(id *uuid.UUID) *VehicleCreate {
	if id != nil {
		vc = vc.SetUserID(*id)
	}
	return vc
}

// SetUser sets the "user" edge to the User entity.
func (vc *VehicleCreate) SetUser(u *User) *VehicleCreate {
	return vc.SetUserID(u.ID)
}

// AddRideIDs adds the "rides" edge to the Ride entity by IDs.
func (vc *VehicleCreate) AddRideIDs(ids ...uuid.UUID) *VehicleCreate {
	vc.mutation.AddRideIDs(ids...)
	return vc
}

// AddRides adds the "rides" edges to the Ride entity.
func (vc *VehicleCreate) AddRides(r ...*Ride) *VehicleCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vc.AddRideIDs(ids...)
}

// Mutation returns the VehicleMutation object of the builder.
func (vc *VehicleCreate) Mutation() *VehicleMutation {
	return vc.mutation
}

// Save creates the Vehicle in the database.
func (vc *VehicleCreate) Save(ctx context.Context) (*Vehicle, error) {
	vc.defaults()
	return withHooks[*Vehicle, VehicleMutation](ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VehicleCreate) SaveX(ctx context.Context) *Vehicle {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VehicleCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VehicleCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VehicleCreate) defaults() {
	if _, ok := vc.mutation.ID(); !ok {
		v := vehicle.DefaultID()
		vc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VehicleCreate) check() error {
	if _, ok := vc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Vehicle.city"`)}
	}
	return nil
}

func (vc *VehicleCreate) sqlSave(ctx context.Context) (*Vehicle, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VehicleCreate) createSpec() (*Vehicle, *sqlgraph.CreateSpec) {
	var (
		_node = &Vehicle{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vehicle.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vehicle.FieldID,
			},
		}
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vc.mutation.City(); ok {
		_spec.SetField(vehicle.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := vc.mutation.GetType(); ok {
		_spec.SetField(vehicle.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := vc.mutation.CreationTime(); ok {
		_spec.SetField(vehicle.FieldCreationTime, field.TypeTime, value)
		_node.CreationTime = value
	}
	if value, ok := vc.mutation.Status(); ok {
		_spec.SetField(vehicle.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := vc.mutation.CurrentLocation(); ok {
		_spec.SetField(vehicle.FieldCurrentLocation, field.TypeString, value)
		_node.CurrentLocation = value
	}
	if value, ok := vc.mutation.Ext(); ok {
		_spec.SetField(vehicle.FieldExt, field.TypeJSON, value)
		_node.Ext = value
	}
	if nodes := vc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.UserTable,
			Columns: []string{vehicle.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.RidesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vehicle.RidesTable,
			Columns: []string{vehicle.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VehicleCreateBulk is the builder for creating many Vehicle entities in bulk.
type VehicleCreateBulk struct {
	config
	builders []*VehicleCreate
}

// Save creates the Vehicle entities in the database.
func (vcb *VehicleCreateBulk) Save(ctx context.Context) ([]*Vehicle, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vehicle, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VehicleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VehicleCreateBulk) SaveX(ctx context.Context) []*Vehicle {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VehicleCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VehicleCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
