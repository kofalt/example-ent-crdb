// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// CreditCard holds the value of the "credit_card" field.
	CreditCard string `json:"credit_card,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Vehicles holds the value of the vehicles edge.
	Vehicles []*Vehicle `json:"vehicles,omitempty"`
	// Rides holds the value of the rides edge.
	Rides []*Ride `json:"rides,omitempty"`
	// UserPromoCodes holds the value of the user_promo_codes edge.
	UserPromoCodes []*UserPromoCode `json:"user_promo_codes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// VehiclesOrErr returns the Vehicles value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) VehiclesOrErr() ([]*Vehicle, error) {
	if e.loadedTypes[0] {
		return e.Vehicles, nil
	}
	return nil, &NotLoadedError{edge: "vehicles"}
}

// RidesOrErr returns the Rides value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RidesOrErr() ([]*Ride, error) {
	if e.loadedTypes[1] {
		return e.Rides, nil
	}
	return nil, &NotLoadedError{edge: "rides"}
}

// UserPromoCodesOrErr returns the UserPromoCodes value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserPromoCodesOrErr() ([]*UserPromoCode, error) {
	if e.loadedTypes[2] {
		return e.UserPromoCodes, nil
	}
	return nil, &NotLoadedError{edge: "user_promo_codes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldCity, user.FieldName, user.FieldAddress, user.FieldCreditCard:
			values[i] = new(sql.NullString)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				u.City = value.String
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				u.Address = value.String
			}
		case user.FieldCreditCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field credit_card", values[i])
			} else if value.Valid {
				u.CreditCard = value.String
			}
		}
	}
	return nil
}

// QueryVehicles queries the "vehicles" edge of the User entity.
func (u *User) QueryVehicles() *VehicleQuery {
	return NewUserClient(u.config).QueryVehicles(u)
}

// QueryRides queries the "rides" edge of the User entity.
func (u *User) QueryRides() *RideQuery {
	return NewUserClient(u.config).QueryRides(u)
}

// QueryUserPromoCodes queries the "user_promo_codes" edge of the User entity.
func (u *User) QueryUserPromoCodes() *UserPromoCodeQuery {
	return NewUserClient(u.config).QueryUserPromoCodes(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("city=")
	builder.WriteString(u.City)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(u.Address)
	builder.WriteString(", ")
	builder.WriteString("credit_card=")
	builder.WriteString(u.CreditCard)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
