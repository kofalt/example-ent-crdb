// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/predicate"
	"github.com/kofalt/example-ent-crdb/ent/ride"
	"github.com/kofalt/example-ent-crdb/ent/vehiclelocationhistory"
)

// VehicleLocationHistoryUpdate is the builder for updating VehicleLocationHistory entities.
type VehicleLocationHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *VehicleLocationHistoryMutation
}

// Where appends a list predicates to the VehicleLocationHistoryUpdate builder.
func (vlhu *VehicleLocationHistoryUpdate) Where(ps ...predicate.VehicleLocationHistory) *VehicleLocationHistoryUpdate {
	vlhu.mutation.Where(ps...)
	return vlhu
}

// SetCity sets the "city" field.
func (vlhu *VehicleLocationHistoryUpdate) SetCity(s string) *VehicleLocationHistoryUpdate {
	vlhu.mutation.SetCity(s)
	return vlhu
}

// SetRideID sets the "ride_id" field.
func (vlhu *VehicleLocationHistoryUpdate) SetRideID(u uuid.UUID) *VehicleLocationHistoryUpdate {
	vlhu.mutation.SetRideID(u)
	return vlhu
}

// SetTimestamp sets the "timestamp" field.
func (vlhu *VehicleLocationHistoryUpdate) SetTimestamp(t time.Time) *VehicleLocationHistoryUpdate {
	vlhu.mutation.SetTimestamp(t)
	return vlhu
}

// SetLat sets the "lat" field.
func (vlhu *VehicleLocationHistoryUpdate) SetLat(f float64) *VehicleLocationHistoryUpdate {
	vlhu.mutation.ResetLat()
	vlhu.mutation.SetLat(f)
	return vlhu
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (vlhu *VehicleLocationHistoryUpdate) SetNillableLat(f *float64) *VehicleLocationHistoryUpdate {
	if f != nil {
		vlhu.SetLat(*f)
	}
	return vlhu
}

// AddLat adds f to the "lat" field.
func (vlhu *VehicleLocationHistoryUpdate) AddLat(f float64) *VehicleLocationHistoryUpdate {
	vlhu.mutation.AddLat(f)
	return vlhu
}

// ClearLat clears the value of the "lat" field.
func (vlhu *VehicleLocationHistoryUpdate) ClearLat() *VehicleLocationHistoryUpdate {
	vlhu.mutation.ClearLat()
	return vlhu
}

// SetLong sets the "long" field.
func (vlhu *VehicleLocationHistoryUpdate) SetLong(f float64) *VehicleLocationHistoryUpdate {
	vlhu.mutation.ResetLong()
	vlhu.mutation.SetLong(f)
	return vlhu
}

// SetNillableLong sets the "long" field if the given value is not nil.
func (vlhu *VehicleLocationHistoryUpdate) SetNillableLong(f *float64) *VehicleLocationHistoryUpdate {
	if f != nil {
		vlhu.SetLong(*f)
	}
	return vlhu
}

// AddLong adds f to the "long" field.
func (vlhu *VehicleLocationHistoryUpdate) AddLong(f float64) *VehicleLocationHistoryUpdate {
	vlhu.mutation.AddLong(f)
	return vlhu
}

// ClearLong clears the value of the "long" field.
func (vlhu *VehicleLocationHistoryUpdate) ClearLong() *VehicleLocationHistoryUpdate {
	vlhu.mutation.ClearLong()
	return vlhu
}

// SetRidesID sets the "rides" edge to the Ride entity by ID.
func (vlhu *VehicleLocationHistoryUpdate) SetRidesID(id uuid.UUID) *VehicleLocationHistoryUpdate {
	vlhu.mutation.SetRidesID(id)
	return vlhu
}

// SetRides sets the "rides" edge to the Ride entity.
func (vlhu *VehicleLocationHistoryUpdate) SetRides(r *Ride) *VehicleLocationHistoryUpdate {
	return vlhu.SetRidesID(r.ID)
}

// Mutation returns the VehicleLocationHistoryMutation object of the builder.
func (vlhu *VehicleLocationHistoryUpdate) Mutation() *VehicleLocationHistoryMutation {
	return vlhu.mutation
}

// ClearRides clears the "rides" edge to the Ride entity.
func (vlhu *VehicleLocationHistoryUpdate) ClearRides() *VehicleLocationHistoryUpdate {
	vlhu.mutation.ClearRides()
	return vlhu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vlhu *VehicleLocationHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, VehicleLocationHistoryMutation](ctx, vlhu.sqlSave, vlhu.mutation, vlhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vlhu *VehicleLocationHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := vlhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vlhu *VehicleLocationHistoryUpdate) Exec(ctx context.Context) error {
	_, err := vlhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlhu *VehicleLocationHistoryUpdate) ExecX(ctx context.Context) {
	if err := vlhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vlhu *VehicleLocationHistoryUpdate) check() error {
	if _, ok := vlhu.mutation.RidesID(); vlhu.mutation.RidesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VehicleLocationHistory.rides"`)
	}
	return nil
}

func (vlhu *VehicleLocationHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vlhu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehiclelocationhistory.Table,
			Columns: vehiclelocationhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vehiclelocationhistory.FieldID,
			},
		},
	}
	if ps := vlhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vlhu.mutation.City(); ok {
		_spec.SetField(vehiclelocationhistory.FieldCity, field.TypeString, value)
	}
	if value, ok := vlhu.mutation.Timestamp(); ok {
		_spec.SetField(vehiclelocationhistory.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := vlhu.mutation.Lat(); ok {
		_spec.SetField(vehiclelocationhistory.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := vlhu.mutation.AddedLat(); ok {
		_spec.AddField(vehiclelocationhistory.FieldLat, field.TypeFloat64, value)
	}
	if vlhu.mutation.LatCleared() {
		_spec.ClearField(vehiclelocationhistory.FieldLat, field.TypeFloat64)
	}
	if value, ok := vlhu.mutation.Long(); ok {
		_spec.SetField(vehiclelocationhistory.FieldLong, field.TypeFloat64, value)
	}
	if value, ok := vlhu.mutation.AddedLong(); ok {
		_spec.AddField(vehiclelocationhistory.FieldLong, field.TypeFloat64, value)
	}
	if vlhu.mutation.LongCleared() {
		_spec.ClearField(vehiclelocationhistory.FieldLong, field.TypeFloat64)
	}
	if vlhu.mutation.RidesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehiclelocationhistory.RidesTable,
			Columns: []string{vehiclelocationhistory.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vlhu.mutation.RidesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehiclelocationhistory.RidesTable,
			Columns: []string{vehiclelocationhistory.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vlhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehiclelocationhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vlhu.mutation.done = true
	return n, nil
}

// VehicleLocationHistoryUpdateOne is the builder for updating a single VehicleLocationHistory entity.
type VehicleLocationHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VehicleLocationHistoryMutation
}

// SetCity sets the "city" field.
func (vlhuo *VehicleLocationHistoryUpdateOne) SetCity(s string) *VehicleLocationHistoryUpdateOne {
	vlhuo.mutation.SetCity(s)
	return vlhuo
}

// SetRideID sets the "ride_id" field.
func (vlhuo *VehicleLocationHistoryUpdateOne) SetRideID(u uuid.UUID) *VehicleLocationHistoryUpdateOne {
	vlhuo.mutation.SetRideID(u)
	return vlhuo
}

// SetTimestamp sets the "timestamp" field.
func (vlhuo *VehicleLocationHistoryUpdateOne) SetTimestamp(t time.Time) *VehicleLocationHistoryUpdateOne {
	vlhuo.mutation.SetTimestamp(t)
	return vlhuo
}

// SetLat sets the "lat" field.
func (vlhuo *VehicleLocationHistoryUpdateOne) SetLat(f float64) *VehicleLocationHistoryUpdateOne {
	vlhuo.mutation.ResetLat()
	vlhuo.mutation.SetLat(f)
	return vlhuo
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (vlhuo *VehicleLocationHistoryUpdateOne) SetNillableLat(f *float64) *VehicleLocationHistoryUpdateOne {
	if f != nil {
		vlhuo.SetLat(*f)
	}
	return vlhuo
}

// AddLat adds f to the "lat" field.
func (vlhuo *VehicleLocationHistoryUpdateOne) AddLat(f float64) *VehicleLocationHistoryUpdateOne {
	vlhuo.mutation.AddLat(f)
	return vlhuo
}

// ClearLat clears the value of the "lat" field.
func (vlhuo *VehicleLocationHistoryUpdateOne) ClearLat() *VehicleLocationHistoryUpdateOne {
	vlhuo.mutation.ClearLat()
	return vlhuo
}

// SetLong sets the "long" field.
func (vlhuo *VehicleLocationHistoryUpdateOne) SetLong(f float64) *VehicleLocationHistoryUpdateOne {
	vlhuo.mutation.ResetLong()
	vlhuo.mutation.SetLong(f)
	return vlhuo
}

// SetNillableLong sets the "long" field if the given value is not nil.
func (vlhuo *VehicleLocationHistoryUpdateOne) SetNillableLong(f *float64) *VehicleLocationHistoryUpdateOne {
	if f != nil {
		vlhuo.SetLong(*f)
	}
	return vlhuo
}

// AddLong adds f to the "long" field.
func (vlhuo *VehicleLocationHistoryUpdateOne) AddLong(f float64) *VehicleLocationHistoryUpdateOne {
	vlhuo.mutation.AddLong(f)
	return vlhuo
}

// ClearLong clears the value of the "long" field.
func (vlhuo *VehicleLocationHistoryUpdateOne) ClearLong() *VehicleLocationHistoryUpdateOne {
	vlhuo.mutation.ClearLong()
	return vlhuo
}

// SetRidesID sets the "rides" edge to the Ride entity by ID.
func (vlhuo *VehicleLocationHistoryUpdateOne) SetRidesID(id uuid.UUID) *VehicleLocationHistoryUpdateOne {
	vlhuo.mutation.SetRidesID(id)
	return vlhuo
}

// SetRides sets the "rides" edge to the Ride entity.
func (vlhuo *VehicleLocationHistoryUpdateOne) SetRides(r *Ride) *VehicleLocationHistoryUpdateOne {
	return vlhuo.SetRidesID(r.ID)
}

// Mutation returns the VehicleLocationHistoryMutation object of the builder.
func (vlhuo *VehicleLocationHistoryUpdateOne) Mutation() *VehicleLocationHistoryMutation {
	return vlhuo.mutation
}

// ClearRides clears the "rides" edge to the Ride entity.
func (vlhuo *VehicleLocationHistoryUpdateOne) ClearRides() *VehicleLocationHistoryUpdateOne {
	vlhuo.mutation.ClearRides()
	return vlhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vlhuo *VehicleLocationHistoryUpdateOne) Select(field string, fields ...string) *VehicleLocationHistoryUpdateOne {
	vlhuo.fields = append([]string{field}, fields...)
	return vlhuo
}

// Save executes the query and returns the updated VehicleLocationHistory entity.
func (vlhuo *VehicleLocationHistoryUpdateOne) Save(ctx context.Context) (*VehicleLocationHistory, error) {
	return withHooks[*VehicleLocationHistory, VehicleLocationHistoryMutation](ctx, vlhuo.sqlSave, vlhuo.mutation, vlhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vlhuo *VehicleLocationHistoryUpdateOne) SaveX(ctx context.Context) *VehicleLocationHistory {
	node, err := vlhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vlhuo *VehicleLocationHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := vlhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlhuo *VehicleLocationHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := vlhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vlhuo *VehicleLocationHistoryUpdateOne) check() error {
	if _, ok := vlhuo.mutation.RidesID(); vlhuo.mutation.RidesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VehicleLocationHistory.rides"`)
	}
	return nil
}

func (vlhuo *VehicleLocationHistoryUpdateOne) sqlSave(ctx context.Context) (_node *VehicleLocationHistory, err error) {
	if err := vlhuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehiclelocationhistory.Table,
			Columns: vehiclelocationhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vehiclelocationhistory.FieldID,
			},
		},
	}
	id, ok := vlhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VehicleLocationHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vlhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehiclelocationhistory.FieldID)
		for _, f := range fields {
			if !vehiclelocationhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vehiclelocationhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vlhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vlhuo.mutation.City(); ok {
		_spec.SetField(vehiclelocationhistory.FieldCity, field.TypeString, value)
	}
	if value, ok := vlhuo.mutation.Timestamp(); ok {
		_spec.SetField(vehiclelocationhistory.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := vlhuo.mutation.Lat(); ok {
		_spec.SetField(vehiclelocationhistory.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := vlhuo.mutation.AddedLat(); ok {
		_spec.AddField(vehiclelocationhistory.FieldLat, field.TypeFloat64, value)
	}
	if vlhuo.mutation.LatCleared() {
		_spec.ClearField(vehiclelocationhistory.FieldLat, field.TypeFloat64)
	}
	if value, ok := vlhuo.mutation.Long(); ok {
		_spec.SetField(vehiclelocationhistory.FieldLong, field.TypeFloat64, value)
	}
	if value, ok := vlhuo.mutation.AddedLong(); ok {
		_spec.AddField(vehiclelocationhistory.FieldLong, field.TypeFloat64, value)
	}
	if vlhuo.mutation.LongCleared() {
		_spec.ClearField(vehiclelocationhistory.FieldLong, field.TypeFloat64)
	}
	if vlhuo.mutation.RidesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehiclelocationhistory.RidesTable,
			Columns: []string{vehiclelocationhistory.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vlhuo.mutation.RidesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehiclelocationhistory.RidesTable,
			Columns: []string{vehiclelocationhistory.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VehicleLocationHistory{config: vlhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vlhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehiclelocationhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vlhuo.mutation.done = true
	return _node, nil
}
