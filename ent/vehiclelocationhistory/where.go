// Code generated by ent, DO NOT EDIT.

package vehiclelocationhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldLTE(FieldID, id))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldEQ(FieldCity, v))
}

// RideID applies equality check predicate on the "ride_id" field. It's identical to RideIDEQ.
func RideID(v uuid.UUID) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldEQ(FieldRideID, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldEQ(FieldTimestamp, v))
}

// Lat applies equality check predicate on the "lat" field. It's identical to LatEQ.
func Lat(v float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldEQ(FieldLat, v))
}

// Long applies equality check predicate on the "long" field. It's identical to LongEQ.
func Long(v float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldEQ(FieldLong, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldContainsFold(FieldCity, v))
}

// RideIDEQ applies the EQ predicate on the "ride_id" field.
func RideIDEQ(v uuid.UUID) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldEQ(FieldRideID, v))
}

// RideIDNEQ applies the NEQ predicate on the "ride_id" field.
func RideIDNEQ(v uuid.UUID) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldNEQ(FieldRideID, v))
}

// RideIDIn applies the In predicate on the "ride_id" field.
func RideIDIn(vs ...uuid.UUID) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldIn(FieldRideID, vs...))
}

// RideIDNotIn applies the NotIn predicate on the "ride_id" field.
func RideIDNotIn(vs ...uuid.UUID) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldNotIn(FieldRideID, vs...))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldLTE(FieldTimestamp, v))
}

// LatEQ applies the EQ predicate on the "lat" field.
func LatEQ(v float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldEQ(FieldLat, v))
}

// LatNEQ applies the NEQ predicate on the "lat" field.
func LatNEQ(v float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldNEQ(FieldLat, v))
}

// LatIn applies the In predicate on the "lat" field.
func LatIn(vs ...float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldIn(FieldLat, vs...))
}

// LatNotIn applies the NotIn predicate on the "lat" field.
func LatNotIn(vs ...float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldNotIn(FieldLat, vs...))
}

// LatGT applies the GT predicate on the "lat" field.
func LatGT(v float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldGT(FieldLat, v))
}

// LatGTE applies the GTE predicate on the "lat" field.
func LatGTE(v float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldGTE(FieldLat, v))
}

// LatLT applies the LT predicate on the "lat" field.
func LatLT(v float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldLT(FieldLat, v))
}

// LatLTE applies the LTE predicate on the "lat" field.
func LatLTE(v float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldLTE(FieldLat, v))
}

// LatIsNil applies the IsNil predicate on the "lat" field.
func LatIsNil() predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldIsNull(FieldLat))
}

// LatNotNil applies the NotNil predicate on the "lat" field.
func LatNotNil() predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldNotNull(FieldLat))
}

// LongEQ applies the EQ predicate on the "long" field.
func LongEQ(v float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldEQ(FieldLong, v))
}

// LongNEQ applies the NEQ predicate on the "long" field.
func LongNEQ(v float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldNEQ(FieldLong, v))
}

// LongIn applies the In predicate on the "long" field.
func LongIn(vs ...float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldIn(FieldLong, vs...))
}

// LongNotIn applies the NotIn predicate on the "long" field.
func LongNotIn(vs ...float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldNotIn(FieldLong, vs...))
}

// LongGT applies the GT predicate on the "long" field.
func LongGT(v float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldGT(FieldLong, v))
}

// LongGTE applies the GTE predicate on the "long" field.
func LongGTE(v float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldGTE(FieldLong, v))
}

// LongLT applies the LT predicate on the "long" field.
func LongLT(v float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldLT(FieldLong, v))
}

// LongLTE applies the LTE predicate on the "long" field.
func LongLTE(v float64) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldLTE(FieldLong, v))
}

// LongIsNil applies the IsNil predicate on the "long" field.
func LongIsNil() predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldIsNull(FieldLong))
}

// LongNotNil applies the NotNil predicate on the "long" field.
func LongNotNil() predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(sql.FieldNotNull(FieldLong))
}

// HasRides applies the HasEdge predicate on the "rides" edge.
func HasRides() predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RidesTable, RidesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRidesWith applies the HasEdge predicate on the "rides" edge with a given conditions (other predicates).
func HasRidesWith(preds ...predicate.Ride) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RidesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RidesTable, RidesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VehicleLocationHistory) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VehicleLocationHistory) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VehicleLocationHistory) predicate.VehicleLocationHistory {
	return predicate.VehicleLocationHistory(func(s *sql.Selector) {
		p(s.Not())
	})
}
