// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/user"
	"github.com/kofalt/example-ent-crdb/ent/userpromocode"
)

// UserPromoCodeCreate is the builder for creating a UserPromoCode entity.
type UserPromoCodeCreate struct {
	config
	mutation *UserPromoCodeMutation
	hooks    []Hook
}

// SetCity sets the "city" field.
func (upcc *UserPromoCodeCreate) SetCity(s string) *UserPromoCodeCreate {
	upcc.mutation.SetCity(s)
	return upcc
}

// SetUserID sets the "user_id" field.
func (upcc *UserPromoCodeCreate) SetUserID(u uuid.UUID) *UserPromoCodeCreate {
	upcc.mutation.SetUserID(u)
	return upcc
}

// SetCode sets the "code" field.
func (upcc *UserPromoCodeCreate) SetCode(s string) *UserPromoCodeCreate {
	upcc.mutation.SetCode(s)
	return upcc
}

// SetTimestamp sets the "timestamp" field.
func (upcc *UserPromoCodeCreate) SetTimestamp(t time.Time) *UserPromoCodeCreate {
	upcc.mutation.SetTimestamp(t)
	return upcc
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (upcc *UserPromoCodeCreate) SetNillableTimestamp(t *time.Time) *UserPromoCodeCreate {
	if t != nil {
		upcc.SetTimestamp(*t)
	}
	return upcc
}

// SetUsageCount sets the "usage_count" field.
func (upcc *UserPromoCodeCreate) SetUsageCount(i int) *UserPromoCodeCreate {
	upcc.mutation.SetUsageCount(i)
	return upcc
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (upcc *UserPromoCodeCreate) SetNillableUsageCount(i *int) *UserPromoCodeCreate {
	if i != nil {
		upcc.SetUsageCount(*i)
	}
	return upcc
}

// SetID sets the "id" field.
func (upcc *UserPromoCodeCreate) SetID(u uuid.UUID) *UserPromoCodeCreate {
	upcc.mutation.SetID(u)
	return upcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (upcc *UserPromoCodeCreate) SetNillableID(u *uuid.UUID) *UserPromoCodeCreate {
	if u != nil {
		upcc.SetID(*u)
	}
	return upcc
}

// SetUser sets the "user" edge to the User entity.
func (upcc *UserPromoCodeCreate) SetUser(u *User) *UserPromoCodeCreate {
	return upcc.SetUserID(u.ID)
}

// Mutation returns the UserPromoCodeMutation object of the builder.
func (upcc *UserPromoCodeCreate) Mutation() *UserPromoCodeMutation {
	return upcc.mutation
}

// Save creates the UserPromoCode in the database.
func (upcc *UserPromoCodeCreate) Save(ctx context.Context) (*UserPromoCode, error) {
	upcc.defaults()
	return withHooks[*UserPromoCode, UserPromoCodeMutation](ctx, upcc.sqlSave, upcc.mutation, upcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upcc *UserPromoCodeCreate) SaveX(ctx context.Context) *UserPromoCode {
	v, err := upcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcc *UserPromoCodeCreate) Exec(ctx context.Context) error {
	_, err := upcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcc *UserPromoCodeCreate) ExecX(ctx context.Context) {
	if err := upcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upcc *UserPromoCodeCreate) defaults() {
	if _, ok := upcc.mutation.ID(); !ok {
		v := userpromocode.DefaultID()
		upcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upcc *UserPromoCodeCreate) check() error {
	if _, ok := upcc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "UserPromoCode.city"`)}
	}
	if _, ok := upcc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserPromoCode.user_id"`)}
	}
	if _, ok := upcc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "UserPromoCode.code"`)}
	}
	if _, ok := upcc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserPromoCode.user"`)}
	}
	return nil
}

func (upcc *UserPromoCodeCreate) sqlSave(ctx context.Context) (*UserPromoCode, error) {
	if err := upcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	upcc.mutation.id = &_node.ID
	upcc.mutation.done = true
	return _node, nil
}

func (upcc *UserPromoCodeCreate) createSpec() (*UserPromoCode, *sqlgraph.CreateSpec) {
	var (
		_node = &UserPromoCode{config: upcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userpromocode.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userpromocode.FieldID,
			},
		}
	)
	if id, ok := upcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := upcc.mutation.City(); ok {
		_spec.SetField(userpromocode.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := upcc.mutation.Code(); ok {
		_spec.SetField(userpromocode.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := upcc.mutation.Timestamp(); ok {
		_spec.SetField(userpromocode.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := upcc.mutation.UsageCount(); ok {
		_spec.SetField(userpromocode.FieldUsageCount, field.TypeInt, value)
		_node.UsageCount = value
	}
	if nodes := upcc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpromocode.UserTable,
			Columns: []string{userpromocode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserPromoCodeCreateBulk is the builder for creating many UserPromoCode entities in bulk.
type UserPromoCodeCreateBulk struct {
	config
	builders []*UserPromoCodeCreate
}

// Save creates the UserPromoCode entities in the database.
func (upccb *UserPromoCodeCreateBulk) Save(ctx context.Context) ([]*UserPromoCode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(upccb.builders))
	nodes := make([]*UserPromoCode, len(upccb.builders))
	mutators := make([]Mutator, len(upccb.builders))
	for i := range upccb.builders {
		func(i int, root context.Context) {
			builder := upccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserPromoCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upccb *UserPromoCodeCreateBulk) SaveX(ctx context.Context) []*UserPromoCode {
	v, err := upccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upccb *UserPromoCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := upccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upccb *UserPromoCodeCreateBulk) ExecX(ctx context.Context) {
	if err := upccb.Exec(ctx); err != nil {
		panic(err)
	}
}
