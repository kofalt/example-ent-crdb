// Code generated by ent, DO NOT EDIT.

package userpromocode

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldLTE(FieldID, id))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldEQ(FieldCity, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldEQ(FieldUserID, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldEQ(FieldCode, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldEQ(FieldTimestamp, v))
}

// UsageCount applies equality check predicate on the "usage_count" field. It's identical to UsageCountEQ.
func UsageCount(v int) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldEQ(FieldUsageCount, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldContainsFold(FieldCity, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldNotIn(FieldUserID, vs...))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldContainsFold(FieldCode, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldLTE(FieldTimestamp, v))
}

// TimestampIsNil applies the IsNil predicate on the "timestamp" field.
func TimestampIsNil() predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldIsNull(FieldTimestamp))
}

// TimestampNotNil applies the NotNil predicate on the "timestamp" field.
func TimestampNotNil() predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldNotNull(FieldTimestamp))
}

// UsageCountEQ applies the EQ predicate on the "usage_count" field.
func UsageCountEQ(v int) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldEQ(FieldUsageCount, v))
}

// UsageCountNEQ applies the NEQ predicate on the "usage_count" field.
func UsageCountNEQ(v int) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldNEQ(FieldUsageCount, v))
}

// UsageCountIn applies the In predicate on the "usage_count" field.
func UsageCountIn(vs ...int) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldIn(FieldUsageCount, vs...))
}

// UsageCountNotIn applies the NotIn predicate on the "usage_count" field.
func UsageCountNotIn(vs ...int) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldNotIn(FieldUsageCount, vs...))
}

// UsageCountGT applies the GT predicate on the "usage_count" field.
func UsageCountGT(v int) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldGT(FieldUsageCount, v))
}

// UsageCountGTE applies the GTE predicate on the "usage_count" field.
func UsageCountGTE(v int) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldGTE(FieldUsageCount, v))
}

// UsageCountLT applies the LT predicate on the "usage_count" field.
func UsageCountLT(v int) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldLT(FieldUsageCount, v))
}

// UsageCountLTE applies the LTE predicate on the "usage_count" field.
func UsageCountLTE(v int) predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldLTE(FieldUsageCount, v))
}

// UsageCountIsNil applies the IsNil predicate on the "usage_count" field.
func UsageCountIsNil() predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldIsNull(FieldUsageCount))
}

// UsageCountNotNil applies the NotNil predicate on the "usage_count" field.
func UsageCountNotNil() predicate.UserPromoCode {
	return predicate.UserPromoCode(sql.FieldNotNull(FieldUsageCount))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserPromoCode {
	return predicate.UserPromoCode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserPromoCode {
	return predicate.UserPromoCode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserPromoCode) predicate.UserPromoCode {
	return predicate.UserPromoCode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserPromoCode) predicate.UserPromoCode {
	return predicate.UserPromoCode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserPromoCode) predicate.UserPromoCode {
	return predicate.UserPromoCode(func(s *sql.Selector) {
		p(s.Not())
	})
}
