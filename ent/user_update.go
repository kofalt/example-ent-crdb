// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kofalt/example-ent-crdb/ent/predicate"
	"github.com/kofalt/example-ent-crdb/ent/ride"
	"github.com/kofalt/example-ent-crdb/ent/user"
	"github.com/kofalt/example-ent-crdb/ent/userpromocode"
	"github.com/kofalt/example-ent-crdb/ent/vehicle"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetCity sets the "city" field.
func (uu *UserUpdate) SetCity(s string) *UserUpdate {
	uu.mutation.SetCity(s)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// ClearName clears the value of the "name" field.
func (uu *UserUpdate) ClearName() *UserUpdate {
	uu.mutation.ClearName()
	return uu
}

// SetAddress sets the "address" field.
func (uu *UserUpdate) SetAddress(s string) *UserUpdate {
	uu.mutation.SetAddress(s)
	return uu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAddress(s *string) *UserUpdate {
	if s != nil {
		uu.SetAddress(*s)
	}
	return uu
}

// ClearAddress clears the value of the "address" field.
func (uu *UserUpdate) ClearAddress() *UserUpdate {
	uu.mutation.ClearAddress()
	return uu
}

// SetCreditCard sets the "credit_card" field.
func (uu *UserUpdate) SetCreditCard(s string) *UserUpdate {
	uu.mutation.SetCreditCard(s)
	return uu
}

// SetNillableCreditCard sets the "credit_card" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreditCard(s *string) *UserUpdate {
	if s != nil {
		uu.SetCreditCard(*s)
	}
	return uu
}

// ClearCreditCard clears the value of the "credit_card" field.
func (uu *UserUpdate) ClearCreditCard() *UserUpdate {
	uu.mutation.ClearCreditCard()
	return uu
}

// AddVehicleIDs adds the "vehicles" edge to the Vehicle entity by IDs.
func (uu *UserUpdate) AddVehicleIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddVehicleIDs(ids...)
	return uu
}

// AddVehicles adds the "vehicles" edges to the Vehicle entity.
func (uu *UserUpdate) AddVehicles(v ...*Vehicle) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.AddVehicleIDs(ids...)
}

// AddRideIDs adds the "rides" edge to the Ride entity by IDs.
func (uu *UserUpdate) AddRideIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddRideIDs(ids...)
	return uu
}

// AddRides adds the "rides" edges to the Ride entity.
func (uu *UserUpdate) AddRides(r ...*Ride) *UserUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRideIDs(ids...)
}

// AddUserPromoCodeIDs adds the "user_promo_codes" edge to the UserPromoCode entity by IDs.
func (uu *UserUpdate) AddUserPromoCodeIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddUserPromoCodeIDs(ids...)
	return uu
}

// AddUserPromoCodes adds the "user_promo_codes" edges to the UserPromoCode entity.
func (uu *UserUpdate) AddUserPromoCodes(u ...*UserPromoCode) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserPromoCodeIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearVehicles clears all "vehicles" edges to the Vehicle entity.
func (uu *UserUpdate) ClearVehicles() *UserUpdate {
	uu.mutation.ClearVehicles()
	return uu
}

// RemoveVehicleIDs removes the "vehicles" edge to Vehicle entities by IDs.
func (uu *UserUpdate) RemoveVehicleIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveVehicleIDs(ids...)
	return uu
}

// RemoveVehicles removes "vehicles" edges to Vehicle entities.
func (uu *UserUpdate) RemoveVehicles(v ...*Vehicle) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.RemoveVehicleIDs(ids...)
}

// ClearRides clears all "rides" edges to the Ride entity.
func (uu *UserUpdate) ClearRides() *UserUpdate {
	uu.mutation.ClearRides()
	return uu
}

// RemoveRideIDs removes the "rides" edge to Ride entities by IDs.
func (uu *UserUpdate) RemoveRideIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveRideIDs(ids...)
	return uu
}

// RemoveRides removes "rides" edges to Ride entities.
func (uu *UserUpdate) RemoveRides(r ...*Ride) *UserUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRideIDs(ids...)
}

// ClearUserPromoCodes clears all "user_promo_codes" edges to the UserPromoCode entity.
func (uu *UserUpdate) ClearUserPromoCodes() *UserUpdate {
	uu.mutation.ClearUserPromoCodes()
	return uu
}

// RemoveUserPromoCodeIDs removes the "user_promo_codes" edge to UserPromoCode entities by IDs.
func (uu *UserUpdate) RemoveUserPromoCodeIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveUserPromoCodeIDs(ids...)
	return uu
}

// RemoveUserPromoCodes removes "user_promo_codes" edges to UserPromoCode entities.
func (uu *UserUpdate) RemoveUserPromoCodes(u ...*UserPromoCode) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserPromoCodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserMutation](ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uu.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uu.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if uu.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := uu.mutation.CreditCard(); ok {
		_spec.SetField(user.FieldCreditCard, field.TypeString, value)
	}
	if uu.mutation.CreditCardCleared() {
		_spec.ClearField(user.FieldCreditCard, field.TypeString)
	}
	if uu.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VehiclesTable,
			Columns: []string{user.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedVehiclesIDs(); len(nodes) > 0 && !uu.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VehiclesTable,
			Columns: []string{user.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.VehiclesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VehiclesTable,
			Columns: []string{user.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RidesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RidesTable,
			Columns: []string{user.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRidesIDs(); len(nodes) > 0 && !uu.mutation.RidesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RidesTable,
			Columns: []string{user.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RidesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RidesTable,
			Columns: []string{user.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserPromoCodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPromoCodesTable,
			Columns: []string{user.UserPromoCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userpromocode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserPromoCodesIDs(); len(nodes) > 0 && !uu.mutation.UserPromoCodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPromoCodesTable,
			Columns: []string{user.UserPromoCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userpromocode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserPromoCodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPromoCodesTable,
			Columns: []string{user.UserPromoCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userpromocode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetCity sets the "city" field.
func (uuo *UserUpdateOne) SetCity(s string) *UserUpdateOne {
	uuo.mutation.SetCity(s)
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// ClearName clears the value of the "name" field.
func (uuo *UserUpdateOne) ClearName() *UserUpdateOne {
	uuo.mutation.ClearName()
	return uuo
}

// SetAddress sets the "address" field.
func (uuo *UserUpdateOne) SetAddress(s string) *UserUpdateOne {
	uuo.mutation.SetAddress(s)
	return uuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAddress(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAddress(*s)
	}
	return uuo
}

// ClearAddress clears the value of the "address" field.
func (uuo *UserUpdateOne) ClearAddress() *UserUpdateOne {
	uuo.mutation.ClearAddress()
	return uuo
}

// SetCreditCard sets the "credit_card" field.
func (uuo *UserUpdateOne) SetCreditCard(s string) *UserUpdateOne {
	uuo.mutation.SetCreditCard(s)
	return uuo
}

// SetNillableCreditCard sets the "credit_card" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreditCard(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCreditCard(*s)
	}
	return uuo
}

// ClearCreditCard clears the value of the "credit_card" field.
func (uuo *UserUpdateOne) ClearCreditCard() *UserUpdateOne {
	uuo.mutation.ClearCreditCard()
	return uuo
}

// AddVehicleIDs adds the "vehicles" edge to the Vehicle entity by IDs.
func (uuo *UserUpdateOne) AddVehicleIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddVehicleIDs(ids...)
	return uuo
}

// AddVehicles adds the "vehicles" edges to the Vehicle entity.
func (uuo *UserUpdateOne) AddVehicles(v ...*Vehicle) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.AddVehicleIDs(ids...)
}

// AddRideIDs adds the "rides" edge to the Ride entity by IDs.
func (uuo *UserUpdateOne) AddRideIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddRideIDs(ids...)
	return uuo
}

// AddRides adds the "rides" edges to the Ride entity.
func (uuo *UserUpdateOne) AddRides(r ...*Ride) *UserUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRideIDs(ids...)
}

// AddUserPromoCodeIDs adds the "user_promo_codes" edge to the UserPromoCode entity by IDs.
func (uuo *UserUpdateOne) AddUserPromoCodeIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddUserPromoCodeIDs(ids...)
	return uuo
}

// AddUserPromoCodes adds the "user_promo_codes" edges to the UserPromoCode entity.
func (uuo *UserUpdateOne) AddUserPromoCodes(u ...*UserPromoCode) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserPromoCodeIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearVehicles clears all "vehicles" edges to the Vehicle entity.
func (uuo *UserUpdateOne) ClearVehicles() *UserUpdateOne {
	uuo.mutation.ClearVehicles()
	return uuo
}

// RemoveVehicleIDs removes the "vehicles" edge to Vehicle entities by IDs.
func (uuo *UserUpdateOne) RemoveVehicleIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveVehicleIDs(ids...)
	return uuo
}

// RemoveVehicles removes "vehicles" edges to Vehicle entities.
func (uuo *UserUpdateOne) RemoveVehicles(v ...*Vehicle) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.RemoveVehicleIDs(ids...)
}

// ClearRides clears all "rides" edges to the Ride entity.
func (uuo *UserUpdateOne) ClearRides() *UserUpdateOne {
	uuo.mutation.ClearRides()
	return uuo
}

// RemoveRideIDs removes the "rides" edge to Ride entities by IDs.
func (uuo *UserUpdateOne) RemoveRideIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveRideIDs(ids...)
	return uuo
}

// RemoveRides removes "rides" edges to Ride entities.
func (uuo *UserUpdateOne) RemoveRides(r ...*Ride) *UserUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRideIDs(ids...)
}

// ClearUserPromoCodes clears all "user_promo_codes" edges to the UserPromoCode entity.
func (uuo *UserUpdateOne) ClearUserPromoCodes() *UserUpdateOne {
	uuo.mutation.ClearUserPromoCodes()
	return uuo
}

// RemoveUserPromoCodeIDs removes the "user_promo_codes" edge to UserPromoCode entities by IDs.
func (uuo *UserUpdateOne) RemoveUserPromoCodeIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveUserPromoCodeIDs(ids...)
	return uuo
}

// RemoveUserPromoCodes removes "user_promo_codes" edges to UserPromoCode entities.
func (uuo *UserUpdateOne) RemoveUserPromoCodes(u ...*UserPromoCode) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserPromoCodeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks[*User, UserMutation](ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uuo.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uuo.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if uuo.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := uuo.mutation.CreditCard(); ok {
		_spec.SetField(user.FieldCreditCard, field.TypeString, value)
	}
	if uuo.mutation.CreditCardCleared() {
		_spec.ClearField(user.FieldCreditCard, field.TypeString)
	}
	if uuo.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VehiclesTable,
			Columns: []string{user.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedVehiclesIDs(); len(nodes) > 0 && !uuo.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VehiclesTable,
			Columns: []string{user.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.VehiclesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VehiclesTable,
			Columns: []string{user.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RidesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RidesTable,
			Columns: []string{user.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRidesIDs(); len(nodes) > 0 && !uuo.mutation.RidesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RidesTable,
			Columns: []string{user.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RidesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RidesTable,
			Columns: []string{user.RidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ride.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserPromoCodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPromoCodesTable,
			Columns: []string{user.UserPromoCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userpromocode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserPromoCodesIDs(); len(nodes) > 0 && !uuo.mutation.UserPromoCodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPromoCodesTable,
			Columns: []string{user.UserPromoCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userpromocode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserPromoCodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPromoCodesTable,
			Columns: []string{user.UserPromoCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userpromocode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
